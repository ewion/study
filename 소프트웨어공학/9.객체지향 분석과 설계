주요용어
OOA/OOD : 객체지향 분석과 설계로 상호작용하는 객체들로 시스템을 모델링하는 방법이다. 분석 과정에서는 문제 도메인을 분석하여 다루어야 하는 정보들에 관한 개념 모델을 작성하는 것에 주안점을 둔다.
유스케이스 : 사용자와 시스템 간의 일련의 상호 작용 또는 사용자 입장의 사용 시나리오로서 시스템이 제공하는 기능적 요구사항을 의미한다.
객체 설계 : 시스템 설계 후에 클래스를 설계하는 작업이다. 클래스의 인터페이스와 자료구조, 메소드의 알고리즘, 전체 클래스의 구조화와 최적화 작업을 수행한다.
UP : UML 창시자가 제안한 것으로 여러 객체지향 방법론의 장점을 통합한 반복적 점증적 개발을 위한 프로세스의 프레임워크

내용
1. 객체지향 분석과 설계 개요
 개념
 - 시스템을 상호작용하는 객체들로 모델링
 - 객체지향 분석(OOA)과 설계 과정(OOD) 일반적으로 반복적 점증적 프로세스

 객체지향 분석
 - 결과물은 시스템이 기능적으로 무엇을 수행하는지를 설명한 것
 - 유스케이스 다이어그램, 유스케이스명세
 - 문제 도메인을 분석하여 개념모델 작성
 - 클래스 다이어그램, 상호작용 다이어그램

 객체지향 설계
 - 결과물은 시스템을 어떻게 만들 것인가를 설명하는 것
 - 분석 과정의 모델을 비기능적 요구사항과 아키텍처를 고려하여 변환
 - 개념 클래스는 구현 클래스로 변환됨
 - 응답시간, 처리율, 실행 플랫폼, 개발환경, 프로그래밍 언어를 고려

2. 요구사항 추출
 요구 공학
 - 고객이 이해할 수 있는 요구사항 명세서를 작성
 - 요구사항 명세서는 분석 활동 동안 구조화되고 정형화 되어짐
 - 시나리오에 기초한 요구사항 추출을 위한 활동

 액터 찾기
 - 액터는 시스템과 상호작용하는 사람이나 외부 시스템
 - 액터 식별은 요구사항 추출의 첫 단계
  시스템이 지원해야 할 사용자를 식별

 시나리오 찾기
 - 액터가 보는 시스템의 단일 기능을 이야기 식으로 기술한 것
 - 응용 분야의 용어를 사용하여 단일 기능 표현
 - 시나리오가 유스케이스와 다른 점
  특정 사례에 초점, 모든 상황을 기술하는건 아님

 유스케이스 찾기
 - 시나리오는 유스케이스의 인스탄스
 - 해당 기능의 모든 가능한 시나리오를 명세한 것
 - 시나리오 < 유스케이스

 유스케이스 상세화
 - 요구사항 상세히 명세함
  시스템이 제공하는 기술을 자세히 기술
  유스케이스의 완전성과 정확성을 높이는 작업
  시나리오에서 포함하지 못한 기능 파악하여 예외사항 또는 새로운 유스케이스 추가
 - 고려 사항
  시스템이 다루는 대상 상세히 함
  저수준의 상호작용, 예외 사항의 파악과 처리 명시
  유스케이스들에서 공통 기능의 추출

 유스케이스들 관의 관계 찾기
 - 확장 관계
  특정 조건하에서 확장된 행위를 포함하면 확장 유스케이스로 분리
  기본 유스케이스에서 예외적이고 선택적인 사건의 흐름을 별도로 분리
 - 포함 관계
  공통의 기능 분리
  소스 유스케이스와 재사용 가능한 공통 유스케이스로 분리
  중복성을 줄임
  소스 유스케이스에는 공통의 유스케이스가 반드시 필요

3. 분석
 분석 모델
 - 기능 모델
  요구 추출에 유스케이스와 사용자 스토리 방법을 사용
  결과물로 유스케이스다이어그램과 유스케이스 명세를 작성
  계속적으로 수정,보완
 - 분석 객체 모델
  응용 도메인을 설명하는 개념 모델로서 클래스 다이어그램으로 표현
 - 동적 모델
  개념 모델을 확장하여 액터와 시스템의 상호작용 표현(시퀀스 다이어그램)
  단일 객체의 상태 변화를 모델링(상태 머신 다이어그램)

 기능 모델
 -

 유스케이스 다이어그램
 - SW 시스템과 외부환경과의 상호작용 표현
 - 막대인간은 액터로 시스템과 상호작용하는 오브젝트
 - 사각 박스로 시스템의 경계 표시
 - 타원은 유스케이스로 액터가 이용하는 기능
 - 직선은 액터가 유스케이스를 시작시키거나, 유스케이스의 결과를 받는 것

 분석 객체 모델
 - 사용자 관점에서 시스템 표현
  다루어야 하는 개별 개념들과 그들간의 관계 표현
  클래스 다이어그램으로 표현
  개념은 클래스로 표현되며 속성과 오퍼레이션을 가짐
  분석 모델에서 클래스는 고수준으로 추상화 되어 표현됨
 - 엔티티/ 경계/ 제어 객체
  3개 유형으로 구분
  유형 구분함으로 작고 특화된 객체를 만들게 되고 변경 용이

 동적 모델
 - 시퀀스 다이어그램
  단일 유스케이스에서 객체들의 상호작용을 표현
  개별 클래스에 책임을 할당
  설계 과정을 거치면 하나의 클래스는 소스코드상에서 하나 이상의 구현 클래스에 대응
 - 상태 머신 다이어그램
  단일 객체 관점에서 시스템 행위를 표현
  긴 생명주기와 상태 종속적 행위를 하는 객체들만들 고려하는 것이 좋음
  대개 제어 객체를 대상으로 작성
  작성 과정에서 객체의 행위를 정형화하며 빠뜨린 오퍼레이션을 발견 할 수 있음

 분석 활동
 - 자연언어 분석 방법
  명사 : 클래스
  have : 집합 관계
  be동사 : 상속 관계
  형용사 : 속성
 - 주요 활동
  엔티티/ 경계/ 제어 객체 찾기
  유스케이스를 시퀀스 다이어그램으로 변환하기
  연관 찾기, 집합체 연관 찾기
  속성 찾기
  객체의 상태 종속적 행위를 모델링
  객체 간의 상속관계를 모델링 하기
 - 앤티티 객체 찾기
  앤티티 객체는 시스템이 유지하는 정보를 표현
  유스케이스작성을 위해 명확히 규정한 용어 ,반복적으로 등장하는 명사
  실세계의 개체나 유지해야 하는 행위 정보, 데이터 소스나 종착지
 - 경계 객체 찾기
  사용자 인터페이스를 모델링 한 것
  액터에게 받은 정보를 엔티티 객체나 제어 객체가 사용할 수 있는 형태로 변환
  각 액터는 하나의 경계 객체를 통해 상호작용
  사용자 인터페이스 컨트롤, 데이터 입력 폼, 사용자에게 제공하는 메시지 등이 후보가 될 수 있음
 - 제어 객체 찾기
  실제적 기능을 수행하는 부분으로 경계 객체와 엔티티 객체 사이의 조정자
  경계 객체로부터 정보를 받아 앤티티 객체로 보내는역할
  유스케이스 당 하나 도는 유스케이스의 액터당 하나의 제어 객체가 필요
  유스케이스가 시작될 때 만들어지고 유스케이스가 끝날대 업어짐
 - 연관 찾기
  동사나 동사구 조사
  객체들 간 관계나 상호의존성 표현
  연관의 이름, 연관에 참여하는 클래스의 역할, 관계의 다중성 표현
 - 집합체 연관 찾기
  전체- 부품관계를 포함하는 특별한 유형의 연관
  구성 집합치는 부품의 존재가 전체에 의존하는 경우
  공유 집합체 연관은 독립적으로 존재하거나 여러 집합체에 의해 공유될 수있음
 - 속성 찾기
  객체의 특성을 표현, 소유의 의미를 가지는 단어나 형용사 조사
  구현할 때는 커스터머와 리소스 사이의 연관 관계에서 리로스리스트가 커스터머의 속성으로 표현될수있음

4. 시스템 설계
 개념
 - 분석 모델을 시스템 설계 모델로 변환하는 작업
 - 시스템 설계의 결과
  설계 목표의 정의 : 시스템 품질을 기술
  소프트웨어 아키텍처의 결정
  경계 조건의 기술 : 시스템의 설치, 시작, 종료 및 예외처리 사항

 설계 목표의 설정
 - 설계 목표의 설정은 시스템 설계의 시작으로 대개 비기능요구사항과 응용 도메인으로부터 유도됨

 아키텍처 설계에서 다루는 문제
 - 설계 목표에 맞는 아키텍처를 결정할 때 고려사항
 - 하드웨어와 스프트웨어 연결
 - 데이터 관리

5. 통합 프로세스 (UP)
 개념
 - 객체지향 분석과 설계를 위한 방법론
  여러 개발 방법론의 장점 취합
  반복적이고 점증적인 프로세스를 위한 프레임워크
  개발 조직이나 프로젝트에 맞추어 사용될 수 있음
  RUP 는 UP를 다듬고 HTML로 문서화한 제품
 - UP가 강조하는 사항
  반복적 개발
  유스케이스 기반의 개발
  아키텍처 중요시
  프로젝트 초기에 중요 위험을 다룰 것

 UP 생명주기
 - RUP는 작업프로세스분야에 따라 구분
 - UP 생명주기
  도입 정련 구축 전이의 4단계로 구분
  정련 구축 전이는 각각 일련의 반복으로 구성
 - 도입 정련 구축 전이의 반복단계에서
