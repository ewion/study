
1. 소프트웨어 프로세스
 개요
 - 시스템을 개발하거나 유지보수할 목적으로 수행되는 활동 일체, 절차
 - 누가 언제하는지, 어떤 결과물을 만드는지
 - 개발 조직은 적당한 프로세스 모델을 보유, 공통의 개발 문화와 공통 기술 제공해야함

 프로세스 모델의 필요성
 - 전체 프로세스 이해
 - 구조화된 방법을 개발에 적용
 - 자원 사용에 대한 사전 계획
 - 자원 사용 통제
 - 시스템 개발 과정 추적, 관리

 프로세스 모델 선택 시 고려 사항
 - 개발 조직에 적합한지
 - 프로젝트유형 에 적합한지
 - 대형 프로젝트인 경우 부분마다 다른 프로세스모델 적용

 주요 프로세스 활동
 - 명세
  소프트웨어 기능과 운영상 제약 조건, 요구사항 점검
 - 개발
  설계, 프로그래밍
 - 검증
  고객의 명세에 적합한지 여부
 - 진화
  변경, 유지보수 등

2. 폭포수 모델
 개념
 - 선형순체 모델, 고전적 소프트웨어 생명 주기라고도 함
 - 각 단계의 병행 수행X, 거슬러 반복되지 않음(폭포수)
 - 실제로 수정을 위한 재작업을 위해 앞 단계로의 피드백이 불가피(안할수는 없음)

 타당성 조사
 - 문제점 파악, 해결방안 제시하여 투입비용 대비 이익 평가
  조직 측면
  경제적
  기술적
  운영 :
 - 시간적 제약과 정신적 압박감 존재
 - 타당성 조사 보고서 : 문제정의, 기술 및 경제적 타당성, 해결방안과 기대효과, 비용과 인도날자 포함

 요구 분석과 명세
 - 무엇을 어떻게 개발할지 결정하는 단계
 - 요구사항
  시스템이 갖추어야 하는 저간이나 능력
  요구사항명세나 계약서에 명시되야 함
 - 요구사항 명세서
  SRS
  의뢰자와 개발자 간의 의사소통 수단으로 정확하고 일관성있으며 완전해야 함
 - 요구사항 명세서의 구성
  시스템과 목적의 범위
  기능적 요구사항, 비기능적 요구사항
  기타 제약 조건

 설계와 명세
 - 무엇을 어떻게로 변환하는 작업
 - 설계 단계의 구분
  아키텍처
  인터페이스
  프로그램 설계
 - 설계 방법
  전통적
  객체지향

 코딩과 단위 테스트
 - 설계 결과를 프로그램으로 작성
 - 구현화된 모듈이 명세서를 만족하는지 테스트하여 확인
 - 고려 사항
  코딩표준 준수
  테스트 절차의 준수
  코드 인스펙션

 통합 및 시스템 테스트
 - 통합 테스트
  모듈들을 통합하여 점증적으로 시스템 구축
  점증적 방식
 - 시스템 테스트
  모든 모듈을 통합 후 최종적으로 완서된 시스템이 요구사항을 만족하는지 확인
 - 알파 테스트
  개발 현장에서 수행
  일반 소프트웨어의 경우 독립적 테스트 팀이 먼저 알파테스트 수행후 베타버전 릴리스
  주문형 소프트웨어인 경우 개발자 플랫폼에서 실제 사용후, 개발자와 고객 사이에 제품의 인수에 대한 동의가 이루어 질 때 까지 수행(인수 테스트)
 - 베타 테스트
  고객의 실제 사용 환경에서 수행
  일반 소프트 웨어 출시 전 사전평가를 받음

 인도와 유지보수
 - 실제 사용을 위해 배포하는 것
 - 유지보수, 진화
  배포~폐기 사이의 모든 수정 및 보완 활동
 - 유지보수가 적은 소프트웨어를 개발

 유지보수의 종류
 - 수정 : 오류 수정
 - 적응 : 변경된 환경에 적응
 - 완전 : 기능개선 및 성능 향상
 - 예방 : 유지보수성 향상

 폭포수 모델의 장단점
 - 장점
  선형 모델로 이해하기 용이
  단계별로 정형화된 접근 방법과 체계적 문서화 가능
  진행 상황 명확히 파악 가능
 - 단점
  요구사항을 완벽하게 작성해야함
  경직성이 높음
  시스템의 동작을 후반에 구현
  대형 프로젝트에 부적합
  문서화에 지나친 자원 낭비
  위험 분석 결여, 일정 지연 가능성 높음

3. 반복진화형 모델(프로토타입 모델)
 개요
 - 초기 버전을 만들고 요구사항 정제하여 새로운 버전을 개발하는 작업 반복하여 시스템을 완성해 가는 방식
 - 불안정 요구사항 -> 명세 -> 개발 -> 검증 -> 초기버전, 중간버전 -> 최종 버전

 장단점
 - 장점
  요구사항이 완성되지 못한 경우에도 초기버전을 만들고 점차적으로 명확한 요구사항 도출
 - 단점
  관리적 관점에서 개발 비용 예상이 힘들고 재작업이 잦아져 종료시점이 늦춰질 가능성이 높음
  공학적 관점에서 잦은 수정은 소프트웨어 개발에 악영향

 점증적 모델과의 차이점
 - 프로토타입은 요구사항이 불안정하고 명확하지 못할 때 사용
  개발이 진행되면서 요구 변화 수용
  명확히 이해할 수 없는 새로운 기술을 적용할 때 사용
  한꺼번에 모든 기능을 포함해 인도해야 하는 경우 사용
 - 점증적 모델은 요구사항의 중요도에 따라 요구사항을 나누고 작업순서를 정함
  중요사항 우선 개발
  조금씩 개발하면서 여러번의 릴리스가 발생

 프로토타이핑 방법
 - 소프트웨어 요구사항을 파악하기 위한 좋은 방법

 프로토타이핑 방법의 장단점
 - 장점
  프로젝트 실현가능성 소프트웨어 개발가능성 판단 가능
  개발자, 사용자 간의 의사소통 명확
  기능적 요구사항 외에도 성능이나 유용성등 품질요구 분명히 할 수 있음
  시스템을 미리 체험하여 사용자 사전 교육
  개발 단계에서 유지보수 병행
 - 단점
  문서화가 어려움
  진척사항 제어 어려움

4. 점증적 모델
 개요
 - 여러개의 모듈들로 분해, 핵심 모듈 우선 개발
 - 분해하는 과정을 증분이라 함
 - 각각을 점증적으로 개발하여 인도

 장단점
 - 장점
  중요한 모듈이 먼저 개발되므로 사용자는 이른 시기에 시스템 체험
  릴리스 방식이 요구사항 변화에 대응하기 용이
  증분들은 점차로 규모와 기능이 축소되어 관리가 용이
  먼저 개발되는 중요한 부분이 반복적으로 테스트
 - 단점
  기능적으로 분해하기 어려울 수 있음
  적당한 크기의 증분이 어려움
  증분을 개발하기 전 명확한 요구사항을 정의해야 함

5. 나선형 모델
 개요
 - 반복 진화형 모델의 최종 진화 형태
 - 전체 생명주기에 위험분석, 프로토타이핑을 계확하고 사용하여 위험을 최소화하려는 목적
 - 가장 중앙의 원을 타당성 조사, 다음원을 요구사항 정의, 설계 단계 ... 점증적으로 확장

 고려 사항
 - 나선형 모델은 위험관리를 지원하는 프로세스의 프레임 워크(프로세스 생성기)
 - 위험관리에 비용이 들지만 가치가 있음
 - 실험적이고 복잡한 대형 프로젝트에 적합

 장단점
 - 장점
  대형 프로젝트에서 위험관리가 용이, 성공가능성 향상
  프로젝트 특성이나 개발 조직에 맞게 변형 가능
 - 단점
  경험이 부족하여 충분히 검증되지 안ㅇㅎ음
  모델 자체가 복잡
  프로젝트 관리가 어려움

6. V 모델
 개요
 - V의 모습을 띄움
 - 폭포수 모델의 확장 형태로 생명주기 단계별로 상응하는 테스트 단계가 존재
 - 아래 방향으로 진행하다가 코딩 단계를 거치며 위로 향함
 - 테스트 작업을 중요시, 적정수준의 품질 보증 지원

 특징
 - 각 개발 단계의 작업을 확인하기 위한 테스트 작업 존재
 - 생명주기 초반부터 테스트 작업 지원
 - 폭포수 모델에 비해 반복과 재처리 과정 명확
 - 테스트 작업을 단계별로 구분함으로 책임소재 명확

7. 애자일 방법
 개요
 - 기민함,민첩함을 뜻한 애자일
 - 변화수용, 협업 강조, 제품의 빠른 인도를 강조하는 반복적 개발 방법
  문서화 작업보다는 코드 강조, 소프트웨어 우선시
  변화는 불가피하며 이에 대응하는것이 현실적
  기존의 개발 프로세스는 설계기간이 길며 재작업시 오버헤드 크다는 생각
  환경의 변화에 빠르게 대응하고, 빠른 인도 중요시
 - 애자일 선언문
  개개인/상호작용, 작동하는 SW, 고객과의협력, 변화에 대응
 - 요구사항이 자주 바뀌는 중소혀으이 비즈니스 시스템이나 전자상거래 응용에 적합

 익스트림 프로그래밍(XP)
 - 대표적인 애자일 방법의 하나
 - 좋은 실전 지침을 적극적으로 주문할 것을 주문

 XP의 실전 지침
 - 작고 빈번한 릴리스, 빠른 피드백과 지속적 개선
 - 고객도 개발팀의 일원
 - 프로세스 중심이 아닌 사람 중심의 작업과 짝 프로그래밍
 - 단순한 설계와 테스트 선행 개발
 - 코드 품질 개선을 위한 리팩토링 제안
  리팩토링: 코딩 스타일이나 코드 구조 개선

 짝 프로그래밍
 - 두 사람이 듀오가 되어 한사람은 코딩, 한사람은 검사 수행, 30분마다 역할 변경
 - 장점
  코드에 대한 책임 공유
  비형식적 검토 수행
  코드 개선을 위한 리팩토링 장려
  생산성 저하 없음

 테스트 선행 개발
 - 테스트 케이스 먼저 작성하고 이것을 통과하는 코드 만듬
 - 태스크 별로 테스트 케이스 만듬
  요구사항은 스토리카드로 표현, 스토리카드는 태스크로 분해
  요구사항과 코드와의 관계가 명확
 - 통합 테스트를 강조하며 통합 과정에서 기존 소프트웨어에 오류가 유입되지 않도록 함
  기존 테스트 케이스 재사용

 스크럼
 - 애자일 개발 과정의 관리에 초점을 둔 프로젝트 관리 프레임워크 또는 소프트웨어 개발 프로세스의 프레임워크
 - 스크럼 프로세스는 계획과 스프린트의 반복으로 이루어짐
 - 프로젝트 계획(제품 백로그)
 - 스프린트 사이클
  제품 증분을 개발하는 작은 프로젝트, 이가 반복됨
  3~9명의 스크럼 팀에서 한 달 이내로 개발
  스프린트 계획
  일일 스크럼 회의
  스프린트 리뷰와 회고
 - 스크럼 팀의 구성
  개발팀, 제품 책임자, 스크럼 마스터