주요용어
표준 코딩 스타일 : 코드의 가독성과 유지보수성을 높이기 위해 프로그램 작성 시 준수해야 하는 코딩 스타일에 관한 지침
소프트웨어 유지보수 : 고객에게 인도되어 사용 중에 있는 소프트웨어를 환경 적응, 오류 수정, 성능 향상, 유지보수성 향상 등을 위하여 계속하여 수정, 보완하는 일
재공학 : 레가시 시스템의 이해성을 높이고 유지보수성, 재사용성 등을 개선하기 위해 소프트웨어를 변경하는 작업
소프트웨어 형상관리 : 소프트웨어 요소들의 관련성을 파악하고 그것들의 버전들을 일관성 있게 관리함으로써 소프트웨어 시스템의 진화를 통제하는 일

내용
1. 코딩
 표준 코딩 스타일
 - 프로그램 작성 시 준수해야 하는 코딩스타일에 관한 지침이나 관행
 - 스타일의 일관성, 구성원간 합의가 중요
 - 표준 코딩스타일의 예
  변수의 사용, 변수나 함수의 작명
  주석, 인덴테이션 사ㅑ용
  제어구조 사용
  함수크기와 인터페이스
  프로그램 문서화

 코드 스멜
 - 프로그램 안에 존재하는 부정적 부분으로 문제를 야기시킬 소지가 있는 부분
  ex) 중복 등장하는 동일코드, 규모가 큰 클래스, 사용되지 않는 데이터

 리팩토링
 - 기능적 행위를 바꾸지 않고 구조를 개선하는 것
 - 가독성, 유지보수성, 확장성을 높이고 복잡성을 줄이기 위함
 - 버그를 잡거나 기능 추가가 아님
 - 코드 리팩토링은 코드 스멜을 개선하는 것
  코딩스타일, 구조 뿐만 아니라 성능의 개선도 고려
  리팩토링 과정에서 테스트가 중요

2. SW 유지보수 개요
 SW 유지보수
 - 고객에게 인도 된 후 발생되는 소프트웨어의 변경 작업
 - 인도 후에도 변경 발생은 불가피
 - 고려 사항
  사용 조직은 시스템 획득을 위해 큰 투자를 했으며 시스템에 의존하므로 유지보수 중요
  변경으로 발생하는 시스템과 요소들의 여러 버전을 관리해야 함
  SW 아키텍처를 변경할 수도 있음

 유지보수 유형
 - 수정 : 오류 수정
 - 적응 : 외부 환경의 변화에 적응하기 위한 변경
 - 완전 : 기능 추가, 개선, 성능 향상
 - 예방 : 이해성, 유지보수성의 개선을 위한 변경

 유지보수 프로세스
 - 변경 요청 -> 영향력 분석 -> 시스템 릴리스 계획 -> 변경 구현 -> 시스템 릴리스 -> 처음으로

 유지보수 비용과 문제점
 - 응용 분야에 따라 다르나 개발비용보다 유지보수 비용이 더 큼
 - 유지보수성을 고려하여 개발하면 개발비는 증가하나 유지보수 비용을 크게 절감
 - 유지보수의 문제점
  개발팀과 유지보수팀이 다름, 이 때 유지보수를 위해 먼저 시스템을 이해해야 함
  상대적으로 능력이 뛰어나지 못한 인원이 유지보수팀에 속함
  유지보수 계약과 개발계약이 별개
  시간이 지나면서 변경이 계속 이루어지므로 소프트웨어 구조와 가독성이 떨어짐

3. 재공학과 역공학
 레가시 시스템
 - 과거에 개발되어 아직도 사용되고 있으며 사업적으로 중요한 시스템
 - 레가시 시스템의 진화를 준비하기 위해 시스템을 재공학함
 - 재공학이란 기존 시스템의 이해도 개선, 유지보수성의 개선, 재사용성의 향상을 위해 소프트웨어를 변경하는 작업
 - 재공학과 새로 개발의 비교
  재공학의 경우 위험과 비용이 축소됨
  재공학은 기존 시스템을 요구명세서로 생각하는 작업
  재공학에 의한 개선 정도는 새로운 개발에 비해 제한적

 재공학 프로세스
 - 입력은 레가시 시스템
 - 출력은 같은 기능을 가지나 구조화되고 모듈홛된 버전
 - 재공학 프로세스의 활동
  소스코드의 변환 : 프로그래밍 언어를 최신 것으로 변경
  역공학 : 소스코드를 분석하여 설계문서를 추출
  프로그램 재구조화 : 프로그램 제어 구조를 개선하는 일
  프로그램 모듈화 : 전체 모듈 구조를 개선하는 일
  데이터 재공학 : 데이터 구조 변경

 재공학 비용
 - 재구조화 작업이 소스코드 변환 작업보다 비용이 큼
 - 아키텍처를 바꾸는 경우 가장 큰 비용 발생
 - 비용 발생 요인
  소프트웨어와 관련 문서의 품질이 낮은 경우
  재공학을 위한 도구를 사용할 수 없는 경우
  재공학해야 하는 데이터의 양이 많은 경우
  유지보수 전담 요원이 참여하지 못하는 경우

 역공학
 - 후기 생성물에서 이전의 생성물을 추출하기 위해 과학적 지식 이용하는 것
 - 유지보수를 위해서는 시스템에 대한 이해가 선행되어야 함
 - SW공학 관점에서 역공학
  프로그램이나 사용자 메뉴얼로부터 기능명세, 설계문서를 만드는 과정
  시스템을 분석하여 구성요소들과 그 관계를 추출하는 것
  목적 코드에서 소스코드를 유도하는 것
  재문서화를 간단한 역공학의 예로 보기도 함

 재구조화
 - 같은 추상 수준에서 문서의 구조를 개선하는 일
 - 자주 코드의 재구조화를 의미(코드 리팩토링)

 재문서화
 - 문서를 새로 만드는 일
 - 코드 기존문서들로부터 설계문서를 유도하는 일(설계의 복구)
 - 재문서화는 문서의 의미를 바꾸지 않고 개조하는 일

4. SW 형상 관리
 개념
 - SW 시스템을 관리하기 위해 표준과 절차를 사용하기 위한 프로세스
  변화하는 시스템을 관리하기 위해 표준과 절차 사용하는 것
  특정 시점에서 시스템을 구성하는 요소들이 무엇인지 파악하고 기록하는 것
  설계 문서와 코드가 작성완료된 후 공식검토를 거쳐야만 변경 가능
 - 형상 관리 효과
  구성 요소들을 조직화하여 부주의로 인한 수정 가능성 감소
  변경으로 인한 혼란의 최소화
  버전 관리를 통해 요소의 재사용성 증가

 형상 관리 계획
 - 형상관리에 사용되는 표준과 절차를 기술하는 것
  조직 내부의 표준과 외부 형상 관리 표준에 기초함
 - 형상관리 항목 (SCI)
  계획서, 요구사항 명세서, 설계문서
  각 모듈별 소스코드, 실행코드
  테스트 계획, 테스트 케이스, 테스트 스크립트
  시스템 구축에 사용되는 도구들, 컴파일러, 링커, 구문분석기, 파서 등
  개발 보고서

 항목의 식별
 - 형상의 구성 요소로 포함하여 관리될 항목들을 정하고 항목의 특성을기록하는 것
 - 각 요소를 구분하기 위해 항목의 유형과 이름 및 버전 번호가 필요
  이것 외에 설명 날짜 책임자에 대한 정보 다른항목과의 관계도 기록
  형상 자체도 버전 번호를 가짐
 - 형상관리 항목이 개발되어 공식적으로 인정된 상태를 기준선이라고 함

 버전 관리
 - 개별 형상 항목과 시스템 형상은 진화되므로 누가 무엇을 언제 변경했는지 기록하여 이력을 제공하는 버전 관리가 필요
 - 소스코드의 버전을 관리하는 경우
  소스코드 이름, 버전및 변경사항
  사용된 컴파일러, 링커의 버전
  개발자명
  개발 날짜, 시간

 형상 구축
 - 시스템 형상을 만들기 위해 그것을 구성하는 요소들의 정확한 버전 파악, 연결해야 함

 변경 통제 (또는 형상통제 프로세스)
 - 형상관리 항목들에 대한 변경을 통제하기 위한 의사결정 프로세스
 - 변경 제어 프로세스, 형상 상태의 보고, 형상 감사를 포함

 변경 제어 프로세스
 - 변경 제안, 승인을 받아 구현하는 절차
 - 변경 요청, 변경의 파급효과 분석, 변경의 승인(또는 기각), 변경작업, 새로운 버전 생성, 형상의 구축 필요
 - 변경된 항목의 새로운 기준선과 함께 구 버전도 라이브러리에 유지되어야 함
 - 형상관리위원회는 형상관리를 책임지며 변경요청을 평가

5. SW 재사용
 재사용 단위
 - 앱 시스템 재사용
  COTS 재사용
  공통 도메인 아키텍처를 사용하여 애플리케이션 패밀리를 개발
 - 컴포넌트 재사용
  하나의 클래스에서 서브시스템 정도의 규모
 - 함수 재사용
  전통적인 표준 라이브러리

 재사용의 장단점
 - 장점
  개발 및 유지보수 비용 절감
  빠른 인도, 품질 향상
  검증된 컴포넌트이므로 신뢰도 향상
  프로젝트 위험 감소
  컴포넌트 개발에 특화된 전문가 활용
  표준 준수하는 컴포넌트
  개발 검토시간의 단축
 - 단점
  소스코드가 없어 유지보수가 어려움
  CASE 도구와 연동되지 못하는 컴포넌트 존재 가능성
  재사용에 대한 거부감
  컴포넌트 라이브러리의 유지 문제

6. SW 척도
 개념
 - 제품이나 개발 프로세스의 특성을 평가하기 위한 정량적 측정법
  프로젝트 관리에 필요한 정보를 얻기 위함
  프로세스의 개선에 필요한 정보를 얻기 위함
  제품의 품질을 개선하기 위한 정보를 얻기 위함
 - 유지보수의 영향에 주는 요인
  모듈화 정도, 모듈 복잡도, 가독성, 요구사항 추적성, 문서화 수준

 SW 척도의 분류
 - 제품 척도
  제품 특성 표현하는 척도
  크기, 복집도, 설계특성, 성능, 신뢰도 등과 같은 제품의 특성
 - 프로세스 척도
  프로세스 효율성과 프로세스 품질을 나타내는 것
  프로세스 수행 비용, 생산에 걸린 시간, 프로세스 성숙도, 결함
 - 프로젝트 척도

 사이클로매틱 복잡도
 - 유지보수를 위한 수정 작업은 모듈화 정도와 모듈의 복잡성 및 가독성에 큰 영향을 받음
 - 모듈 복잡도를 평가하기 위해 제어구조와 논리적 복잡성 등을 고려하는 복잡도 척도가 존재함

 소프트웨어 사이언스
 - 할스테도의 이론으로 코드에서 측정한 값으로 복잡성 계산
 - 프로그래밍 또는 디버깅에 드는 노력을 예측하는 데도 사용