학습개요
단순 연결 리스트는 하나의 링크 부분이 존재하고, 각각의 노드는 후행 노드만을 가리키는 구조입니다.
따라서 특정 노드의 선행 노드에 대한 접근은 헤드 노드부터 재검색해야 합니다.
이러한 단점을 보완하기 위해, 선행 노드를 가리키는 링크 부분과 후행 노드를 가리키는 링크 부분을 갖는 이중 연결 리스트가 제안되었습니다.
단순 연결 리스트가 사용하지 않는 마지막 노드의 링크 부분을 활용하면서도 프로그램 성능에 도움이 되도록 하기 위해서 원형 연결 리스트가 제안되었다.
단순 연결 리스트의 마지막 노드의 링크가 처음 노드를 가리키게 하여 원형 연결 리스트를 만듭니다.
원형 연결 리스트는 한 방향으로 모든 노드가 원형으로 계속 연결되어 있기 때문에 한 노드에서부터 다른 어떤 노드로도 접근할 수 있는 이점이 있습니다.

학습목표
단순 연결 리스트와 이중 연결 리스트의 장단점을 이해할 수 있다.
원형 연결 리스트의 장점을 이해할 수 있다.
이중 연결 리스트의 노드 삭제 연산과 노드 삽입 연산을 이해할 수 있다.
원형 연결 리스트의 노드 삭제 연산과 노드 삽입 연산을 이해할 수 있다.

정리하기
단순 연결 리스트는 하나의 링크 부분이 존재하고, 각각의 노드는 후행 노드만을 가리키는 구조이며, 특정 노드의 선행 노드에 대한 접근은 헤드 노드부터 재검색해야 하는 단점을 가집니다.
이중 연결 리스트는 선행 노드를 가리키는 링크 부분과 후행 노드를 가리키는 링크 부분을 가집니다.
단순 연결 리스트가 사용하지 않는 마지막 노드의 링크 부분을 활용하면서도 프로그램 성능에 도움이 되도록 하기 위해서 제안된 원형 연결 리스트는
한 방향으로 모든 노드가 원형으로 계속 연결되어 있기 때문에 한 노드에서부터 다른 어떤 노드로도 접근할 수 있는 이점이 있습니다.

1. 연결 리스트의 변형
 연결 리스트의 종류
 - 단순 연결 리스트
  링크(포인터)를 따라가고 링크에는 주소값이 있음. 링크를 따라가다 보면 원하는 데이터에 도달할 수 있음
  하나의 링크만있고 각각의 노드의 링크는 후행 노드만을 가리키는 구조
  특정 노드의 후행 노드는 쉽게 접근할 수 있지만 특정 노드의 선행 노드에 대한 접근은 헤드노드부터 접근해야하는 문제점
 - 이중 연결 리스트
  특정 노드는 선행 노드를 가리키는 링크와 후행 노드를 가리키는 링크가 존재
 - 원형 연결 리스트
  가장 마지막 노드의 링크 필드는 언제나 null임
  리스트의 마지막 원소 뒤에는 아무런 원소가 없기 때문에 연결 리스트의 마지막 노드의 링크 필드는 언제나 null값임
  그래서 마지막 노드의 링크 필드를 활용하면서도 프로그램 성능에 도움이 되도록 원형연결리스트 제안

2. 원형 연결 리스트
 개념
 - 연결리스트의 마지막 노드 링크필드를 활용하면서도 프로그램 성능에 도움이 되도록 원형 연결 리스트가 제안됨
 - 단순연결리스트의 마지막 링크는 null임, 이 null값 자리에 선행 노드를 연결하여 되돌아갈 수 있도록 만들어 준 것이 원형 연결 리스트

3. 이중 연결 리스트