학습개요
트리는 노드 혹은 정점으로 구성된 논리적인 계층이 있는 구조입니다.
데이터 사이의 계층 관계, 포함 관계 등을 나타내는 곳에서 사용되는 자료구조입니다.
나무를 거꾸로 놓은 모양이라 트리라 부릅니다. 그렇기 때문에 용어들도 나무와 관련 있게 뿌리, 잎, 서브 트리 등의 단어를 사용하며 정의됩니다.
트리에서는 용어들을 정확하게 아는 것이 중요합니다.
트리에 속한 모든 노드의 차수가 2 이하인 트리를 이진 트리라고 합니다.
이진 트리는 수학적으로 이론을 정리하기도 쉽고, 컴퓨터 내부에서 구현하기도 쉬워서 다양하게 자주 사용됩니다.
이진 트리에서 각 레벨이 허용되는 최대 개수 노드를 가질 때 그 트리를 가득 찬 이진 트리라고 합니다.
그리고 높이가 k인 이진 트리가 레벨 0부터 k-2까지 다 채우고 마지막 k-1 레벨에서 왼쪽부터 오른쪽으로 노드들이 차례로 채워졌을 때 완전 이진 트리라고 합니다.
트리의 각 노드를 모두 한 번씩 방문하는 것을 순회라고 합니다. 루트를 방문하는 순서에 따라 전위 순회, 중위 순회, 후위 순회라고 합니다.
트리를 순회한 방문 순서와 3장에서 학습한 수식의 전위, 중위, 후위 표기법이 같다는 것을 알 수 있습니다. 연관 지어서 학습하시면 더욱 좋으실 것 같습니다.

학습목표
트리의 용어와 표현 방법을 이해할 수 있다.
트리의 추상 자료형을 이해할 수 있다.
이진 트리의 개념과 구현 방법을 이해할 수 있다.
이진 트리의 순회 연산과 생성, 삽입, 삭제 연산을 이해할 수 있다.

정리하기
트리는 논리적 계층이 있는 구조입니다.
트리를 구성하는 항목을 “노드(node)” 혹은 “정점(vertex)”이라고 합니다.
트리에서 루트는 부모를 갖지 않은 노드입니다.
트리에 있는 어떤 노드에 대해 그 노드로 들어오는 선의 개수를 진입 차수, 나가는 선의 개수를 진출 차수라 합니다.
트리에서 각 노드의 차수(degree of a node)는 진출 차수로 정의합니다.
트리의 차수(degree of a tree)는 트리 내의 각 노드의 차수 가운데 최대 차수로 정의합니다.
루트도 잎도 아닌 노드를 내부 노드라 하고 같은 부모를 갖는 노드들을 형제(sibling)라 합니다.
트리에서 각 노드의 레벨(level)은 루트로부터 그 노드까지 이어진 경로의 길이로 정합니다.
트리는 데이터의 계층 관계, 포함 관계 등을 나타내는 자료구조입니다.
트리에 속한 모든 노드의 차수가 2 이하인 트리를 이진 트리라고 합니다.
이진 트리에서 각 레벨이 허용되는 최대 개수 노드를 가질 때 그 트리를 가득 찬(perfect) 이진 트리라고 합니다.
높이가 k인 이진 트리가 레벨 0부터 k-2까지 다 채우고 마지막 k-1 레벨에서 왼쪽부터 오른쪽으로 노드들이 차례로 채워졌을 때 완전(complete) 이진 트리라고 합니다.
트리의 각 노드를 빠짐없이 한 번씩만 방문하는 것을 순회(traverse)라고 합니다.
루트를 방문하는 순서에 따라 각각 전위(preorder) 순회, 중위(inorder) 순회, 후위(postorder) 순회라고 구분하여 부릅니다.

1. 트리의 개념
 개념들을 분류하여 찾기 쉽게 만드는 것

2. 트리의 표현 방법
 트리의 구성
 - 노드 : 트리의 항목/트리에 저장되는 데이터의 묶음
 - 부모-자식 노드 : 상하 계층구조가 있고 직접적으로 연결된 노드들로서 상위계층의 부모 노드와 하위계층의 자식 노드를 의미함
 - 루트 노드 : 트리의 최상위 노드(부모가 없는 노드) , 진입 차수 0
 - 서브트리 : 부모 노드를 삭제하면 생기는 트리들
 - 잎 노드 : 트리의 맨 바닥에 있으면서 자신의 서브트리를 갖지 않는 노드

 진입/진출 차수
 - 루트 노드 : 진입 차수 0
 - 루트를 제외한 모든 노드의 진입 차수 1
 - 잎 노드 : 진출 차수 0

 내부 노드와 형제
 - 내부 노드 : 루트, 잎이 아닌 로드
 - 형제 노드 : 같은 부모를 가진 노드

 노드의 레벨 : 루트로부터 그 노드까지 이어진 선의 길이
 트리의 깊이 : 트리의 레벨에서 가장 큰값에 1을 더한 것

3. 추상 자료형
 트리의 추상 자료형
 - 트리 객체의 정의 :루트 노드를 갖는 유한 리스트

4. 이진 트리 (중요)
 정의
 - 모든 노드의 차수가 2 이하인 트리
 - 수학적으로 이진 트리의 구성에 관한 이론을 정리하기 쉽고, 프로그램으로 구현하기도 효율적 (2^n 으로 이루어져 있음)
 - 모든 노드가 2개 이하의 자식 노드를 가지므로 일반성을 잃지 않고 오른쪽, 왼쪽이라는 방향 개념 부여 가능
 - 오른쪽 노드와 왼쪽 노드의 개념적 접근(의미적 관계) 도 있음

 가득 찬 이진 트리 (포화 이진트리)
 - 이진 트리에서 각 레벨에서 허용되는 최대 개수 노드를 가지는 트리
 - 정의
  높이가 k 인 이진 트리가 0 레벨 부터 k-2 레벨가지 다 채우고 마지막 k-1 레벨에서 왼쪽부터 오른쪽으로 노드들이 차례로 채워진 이진 트리

 배열을 이용한 이진 트리의 구현
 - 트리가 완전 이진 트리 또는 가득 찬 이진 트리인 경우 낭비되는 공간이 없어 효율적
 - 트리가 깊어질 수록 기억장소 낭비가 2의 거듭제곱에 빌예하며 낭비가 심해짐
 - 그러나 현재 프로그램들에서는 데이터의 빈번한 삽입/삭제 등이 이루어지므로 고정된 공간을 가진 배열을 이용한 이진 트리는 잘 사용하지 않음

 포인터를 이용한 이진 트리의 구현

 이진 트리의 순회
 - 이진 트리의 각 노드를(예외X, 중복X) 한 번씩 방문하는 것
 - 전위 순회
  루트 방문 -> 왼쪽 자식 노드(왼쪽서브트리) -> 오른쪽 자식 노드(오른쪽서브트리)
 - 중위 순회
  왼쪽 서브트리를 중위 순회로 순회 -> 루트 방문 -> 오른쪽 서브트리를 중위 순회로 순회
 - 후위 순회
  왼쪽 서브트리를 후위 순회로 순회 -> 오른족 서브트리를 후위 순회로 순회 -> 루트 방문

5. 이진 트리 연산
 이진트리의 생성/삽입/삭제
 - 일반적인 이진 트리를 생성하는 것은 연결 리스트 연산을 사용
 - 첫 노드를 생성하면 루트 노드가 되고, 새로운 노드를 추가하려면 연결 리스트의 삽입 연산을 사용함
 - 노드를 삭제할 때 삭제하려는 노드가 잎 노드인 경우 해당 노드를 가리키는 포인터를 NULL로 지정하면 됨
 - 잎 노드가 아닌 경우 삭제하려는 노드의 자식노드에 대한 처리를 추가로 해 주어야 함

6. 일반 트리를 이진 트리로 변환