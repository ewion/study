 학습개요
이진 트리를 순회할 때 방문하지 않고 지나쳐온 노드를 저장하는 방법으로 스택을 사용했습니다.
하지만 스택에 저장하고 스택을 관리해야 하는 번거로움이 있었습니다. 이러한 번거로움을 없애기 위한 새로운 방법이 스레드 트리입니다.
정해진 순회 방법에 따른 방문 순서를 유지하는 포인터를 스레드라고 합니다.
그리고 스레드라는 포인터를 갖는 이진 트리를 스레드 트리라고 합니다.
스레드의 종류는 두 가지가 있습니다. 오른쪽 스레드와 왼쪽 스레드입니다.
오른쪽 스레드는 정해진 순회 순서에 따른 그 노드의 후속 노드를 가리킵니다. 왼쪽 스레드는 그 노드의 선행 노드를 가리킵니다.
스레드 트리는 2가지 방법으로 구현할 수 있습니다. 한 가지는 스레드를 저장하는 포인터를 추가하는 방법이 있습니다.
즉 왼쪽 스레드 포인터, 왼쪽 자식 포인터, 데이터, 오른쪽 자식 포인터, 오른쪽 스레드 포인터 필드로 노드 구조를 정하는 것입니다.
이 방법은 기억장소에 대한 부담이 있습니다.
다른 방법은 이진 트리를 위한 연결 리스트의 노드 구조를 그대로 사용하면서, 잎 노드에 있는 사용하지 않는 포인터를 활용하는 방법입니다.
이 방법은 각 노드에 대해 포인터가 스레드로 사용 중인지 아니면 서브 트리에 대한 포인터인지를 구분하기 위해 하나 혹은 두 개의 플래그 필드를 사용합니다.
스레드를 사용한 만큼 편리한 점도 있지만, 트리에서 노드의 삽입과 삭제 연산은 복잡한 편입니다. 코드를 한 줄 한 줄 따라가며 정확하게 이해하는 것이 도움이 될 것입니다.

학습목표
스레드 트리의 개념을 이해할 수 있다.
스레드 트리의 구현 방법을 이해할 수 있다.
스레드 트리의 순회 연산과 삽입, 삭제 연산을 이해할 수 있다.

정리하기
정해진 순회 방법에 따른 방문 순서를 유지하는 스레드(thread)라는 포인터를 갖는 이진 트리를 스레드 트리라고 합니다.
오른쪽 스레드는 정해진 순회 순서에 따른 그 노드의 후속 노드를 가리키고 왼쪽 스레드는 그 노드의 선행 노드를 가리킵니다.
스레드를 구현할 때 스레드를 저장하는 포인터를 추가하는 방법이 있습니다.
스레드를 구현할 때 이진 트리를 위한 연결 리스트의 노드 구조를 그대로 사용하면서, 잎 노드에 있는 사용하지 않는 포인터를 활용하는 방법입니다.
노드가 n개인 이진 트리를 연결 리스트로 구현할 때 NULL 포인터는 항상 2n-(n-1) = n+1개가 존재합니다.
잎 노드에 있는 포인터를 활용할 때는 각 노드에 대해 포인터가 스레드로 사용 중인지 아니면 서브 트리에 대한 포인터인지 구분하기 위해 하나 혹은 두 개의 플래그 필드를 사용합니다.

1. 스레드 트리의 정의
 스레드 트리
 - 이진 트리의 노드 순회 : 전위 순회, 중위 순회, 후위 순회
 - 이진 트리의 노드를 순회할 때 방문하지 않고 지나쳐온 노드들은 스택에 저장하여 관리해야 하는 번거로움 발생
 - 스레드 트리 : 스레드라는 포인터를 추가하여 트리 순회를 편하게 하는 것
 - 스레드 : 순회 방법에 따른 방문순서를 유지하는 포인터

2. 스레드 트리의 구현
 구현 방법
 - 포인터 필드의 추가 : 스레드를 저장하는 포인터를 추가하는 것
  왼쪽 스레드 포인터, 왼쪽 자식 포인터, 데이터, 오른쪽 자식 포인터, 오른쪽 스레드 포인터 필드로 노드 구조를 정의
 - 오른쪽 스레드 : 정해진 순회 순서에 따른 그 노드의 후속 노드를 가리키고
 - 왼쪽 스레드 : 그 노드의 선행 노드를 가리킴
 - 노드의 빈 포인터를 활용 : 기존 이진 트리의 노드 구조를 그대로 사용하면서, 노드의 사용하지 않는 포인터를 활용하는 방법
  추가 기억장소를 사용하지 않아도 되는 장점
 - 잎 노드의 빈 포인터 필드의 활용

 추가될 포인터 필드를 이용한 중위 순회 연산과정
 1. 순회할 트리의 루트 노드를 가리키는 포인터 firstin을 매개변수로 하는 함수의 이름을 inorder()로 함
 2. 노드를 가리킬 수 있는 (TNode) 타입의 포인터 p를 생성하고 루트 노드를 가리키도록 함
 3. 포인터 p가 가리키는 데이터를 출력하고 p를 p의 오른쪽 스레드 값으로 바꾸어 (p->right thread) 중위 순회에 따른 다음 노드를 가리키도록 수정
 4. 이 과정을 p가 null이 될 때까지 반복
 - 추가된 포인터 필드에 의한 스레드 구현
  스택을 운영하지 않고도 쉽게 트리에 속한 모든 노드 순회 가능
  하지만 스레드를 위해 추가 기억장소를 사용한다는 부담이 생김

 잎 노드의 빈 포인터 필드 활용
 - 이진트리의 포인터 갯수 (노드의 갯수를 n개로 가정) : 왼쪽 서브트리를 가리키는 포인터 n개 + 오른쪽 서브트리를 가리키는 포인터 n개 = 2n개의 포인터
 - 루트 노드를 제외한 각 노드 개수는 모두 진입차수가 1
 - 루트 노드를 제외한 전체 노드 즉 누군가로부터 가리켜져야 할 노드의 개수 n-1
 - null이 아닌 포인터 개수 n-1
 - 2n-(n-1)=n+1 개의 null 포인터가 노드에 존재함
 - 2n-(n-1)=n+1 개의 null 포인터를 스레드로 활용
 - 어떤 노드X에 대해 오른쪽 포인터가 null이면 이 포인터를 X노드의 다음으로 순회되는 노드를 가리키도록 하고,
   왼쪽 포인터가 null이면 X노드의 바로 직전에 순회된 노드를 가리키게 함
 - 각 노드에 대해 포인터가 스레드로 사용중인지 아니면 서브트리에 대한 포인터인지를 구분하기 위해 태그필드가 필요(삽입/삭제연산에서 반드시 필요)

 전위 순회
 - 각 노드의 왼쪽 포인터 필드를 스레드로 사용하는 제한 가정
 - 어떤 노드의 왼쪽 포인터가 실제 왼쪽 자식을 가리키면 그대로 두고
 - null 이면 전위 순회로 순회할 때 다음으로 순회되는 노드를 가리키도로구 지정

3. 스레드 트리의 연산
 스레드 트리의 내부노드 삭제
 - 삭제된 노드의 자식 노드를 처리리해야함
  1. 노드의 자식 노드를 모두 삭제
  2. 삭제하려는 노드 x의 왼쪽 서브 트리나 오른쪽 서브트르의 루트를 x가 있던 위치로 옮기는 방법
  3. 잎 노드가 아닌 노드를 삭제하지 못하게 하는 것