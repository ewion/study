학습개요
삽입, 삭제 연산을 보다 효과적으로 작업하기 위해 만든 이진 탐색 트리에 대한 정의와 이진 트리와 같이 순회 방법에 대해서도 학습하게 됩니다.
이진 탐색 트리에서는 각 노드를 식별하기 위해서 별도의 이름을 붙여준 키(key)라는 용어를 사용합니다.
노드의 데이터라고 생각해도 됩니다.
정해진 노드()를 기준으로 왼쪽 서브 트리에 있는 모든 노드는 의 킷값보다 값이 작아야 하고,
오른쪽 서브 트리의 노드들은 의 킷값보다 값이 커야 한다는 조건을 만족하는 이진 트리를 이진 탐색 트리 즉 BS 트리라 합니다.
균형 잡힌 트리로 Splay, AVL, BB 트리가 있습니다. Splay 연산을 적용한 Splay 트리가 있습니다.
최근에 사용한 노드 x를 다음에도 사용할 수 있다는 가정하에 노드 x를 루트에 위치시켜 트리를 재구성합니다.
AVL 트리는 노드 의 왼쪽 서브트리 높이와 의 오른쪽 서브트리 높이가 최대 1만큼 차이가 난다는 조건을 만족하는 트리입니다.
무게가 균형 잡힌 트리란 각 노드의 양쪽 서브트리 무게가 균형을 유지하는 트리입니다. 이 트리를 BB-트리(bound-balanced)라고 부릅니다.
AVL 또는 BB 트리에 대하여 각각 높이 또는 크기 제한 조건을 만족시키는데 드는 비용은 트리를 완전히 균형 잡히게 유지하는 비용이나 노력보다 훨씬 작기 때문에 사용됩니다.

학습목표
이진 탐색 트리의 정의와 순회, 탐색 방법을 이해할 수 있다.
이진 탐색 트리의 삽입 및 삭제 방법을 이해할 수 있다.
Splay 트리의 개념과 연산 방법을 이해할 수 있다.
AVL 트리의 개념과 조건을 이해할 수 있다.
BB 트리의 개념을 이해할 수 있다.

정리하기
트리에 특정 데이터가 있는지를 검색하고, 노드를 자주 삽입, 삭제하는 응용 문제에 가장 효과적인 이진 트리는 이진 탐색 트리(binary search tree)입니다.
키는 각 노드를 식별하기 위해서는 별도의 간단한 이름을 붙여준 것으로 노드의 데이터라고 생각할 수 있습니다.
이진 탐색 트리는 전위 순회, 중위 순회 및 후위 순회로 모든 정점을 차례로 순회할 수 있고 트리 내의 특정 정점을 탐색할 수도 있습니다.
이진 탐색 트리에서 새 노드는 항상 잎으로 삽입합니다. 즉, 루트부터 킷값을 비교하며 자기가 삽입될 위치가 왼쪽이냐 오른쪽이냐를 정하며 내려갑니다.
Splay 트리는 자주 탐색하는 키를 가진 노드를 루트에 가깝게 위치하도록 구성한 이진 탐색 트리입니다.
Splay 트리는 Splay 연산을 적용하여 최근에 사용하려고 접근한 노드 x를 루트에 위치시켜 트리를 재구성합니다.
AVL 트리는 노드 의 왼쪽 서브트리 높이와 의 오른쪽 서브트리 높이가 최대 1만큼 차이가 난다는 조건을 만족하는 트리입니다.
트리의 높이란 노드가 가질 수 있는 가장 높은 레벨에 1을 더한 값으로 루트로부터 잎까지 가장 긴 경로 길이를 말합니다.
트리의 무게는 트리에 속한 잎 노드의 개수로 정의합니다.
무게가 균형 잡힌 트리란 각 노드의 양쪽 서브트리 무게가 균형을 유지하는 트리입니다. 이 트리를 무게가 균형 잡힌 트리(weight-balanced tree) 또는 BB-트리(bound-balanced)라고 부릅니다.
AVL 또는 BB 트리에 대하여 각각 높이 또는 크기 제한 조건을 만족시키는데 드는 비용은 트리를 완전히 균형 잡히게 유지하는 비용이나 노력보다 훨씬 작습니다.
삽입이나 삭제 후에 트리를 완전히 균형 잡히게 유지하기 위해서는 Ο(n)개의 노드를 옮겨야 하는 반면에 AVL 또는 BB 트리는 Ο(log₂n)개의 노드를 옮기면 되는 것으로 알려졌습니다.

1. 이진 탐색 트리
 이진 탐색 트리 (BS 트리 : binary search tree)
 - 특정 데이터의 효과적인 검색을 위해 제한점을 가지는 이진 트리
 - 특정 데이터의 검색과 노드의 삽입, 삭제 처리에 효과적인 이진 트리
 - 트리를 구성할 때 데이터의 탐색을 고려하여 구성하므로 탐색에 최적화된 이진 트리
 - 키 : 탐색, 삽입, 삭제 연산에서 비교가 되는 값, 이진 트리 노드의 데이터를 대표하는 값, 혹은 노드를 특정할 수 있는 값
 - 노드 Vi의 키를 ki라 할때 각 노드 Vi가 다음을 만족하는 이진 트리
  Vi 의 왼쪽 서브 트리에 있는 모든 노드의 키 값은 Vi의 키 값보다 작다
  Vi 의 오른쪽 서브 트리에 있는 모든 노드의 키 값은 Vi의 키 값보다 크다
 - 중위순회를 통해 같은 순서 데이터 (A-B-C-D)를 만들어 낼 수 있는 다양한 BS트리

 BS 트리에서 키 값을 찾는 과정
  1. 트리가 비어 있다면 탐색 실패 아니면 k와 현재 루트 노드의 키 값 ki를 비교
  2. k = ki 면 탐색 성공, 이때 찾은 정점은 vi다
  3. k < ki 면 vi의 왼쪽 서브 트리를 탐색한다. 즉, vi = vi,left 로 바꾸고 1로 간다
  4. k > ki 면 vi의 오른쪽 서브 트리를 탐색한다. 즉 즉, vi = vi,right 로 바꾸고 1로 간다

 BS 트리의 노드 삽입 연산
  1. k = ki 면 멈춘다
  2. k < ki 이면 vi 의 왼쪽 서브 트리에 삽입해야 하므로
     vi = vi -> left 로 하고 4로 간다
  3. k > ki 이면 vi 의 오른쪽 서브 트리에 삽입해야 하므로
          vi = vi -> right 로 하고 4로 간다
  4. 트리가 비어 있으면 키 k를 가지는 노드를 삽입한다. 그렇지 않으면 다시 k와 현재 루트 노드의 키 ki를 비교하여 탐색을 반복한다

 BS 트리 노드 삭제
 - 자식을 하나만 갖는 노드를 삭제하는 경우
   삭제한 노드를 가리키던 포인터가 그 노드의 널이 아닌 서브트리의루트를 가리키게 할당함
 - 두 개의 자식 노드를 가지는 노드를 삭제할 때 항상 특정 방향의 자식 노드를 올리는 방법으로 구현
  항상 오른쪽(혹은 왼쪽) 자식 노드를 삭제 위치로 이동

2. Splay, AVL, BB 트리
 이진 탐색 트리의 특징
 - 트리의 구조와 특정 노드에 접근할 확률은 BS트리의 성능에 영향을 줌
 - 트리의 성능이 구조에 영향을 받음. 어떤 노드의 탐색/삽입/삭제 를 위한 접근정보를 예측할 수 없는 상황에서는 최적의 BS트리구조를 결정하기 어려움
 - 좋은 성능의 BS트리를 구축하는 법
  자주 탐색하는 키를 가진 노드를 트리의 루트에 가깝게 놓는다
  트리가 균형되도록 유지한다. 즉 각 노드에 대해 왼쪽과 오른쪽 서브트리가 가능한 한 같은 수의 노드를 갖게 한다.

 Splay 트리
 - 자주 탐색하는 키를 가진 노드를 루트에 가깝게 위치하도록 구성한 BS트리
 - Splay 연산
  최근에 접근한 노드 x를 (곧 사용할 것으로 예상하여) 루트에 위치시켜 트리를 재구성 하는 연산
 - Splay 트리
  가장 최근에 사용한 노드 x가 트리의 루트에 올 때까지 Splay 연산을 반복하여 적용하여 생성된 이진 트리

 Splay 트리의 연산
 - 노드 x : 최근에 접근한 노드
 - 노드 p : x의 부모 노드
 - 노드 g : x의 조부모 노드
 - Zig : p가 트리의 루트면 p와 x의 간선 연결을 회전시킨다
 - Zig-Zig : p가 루트가 아니고 x와 p가 동일하게 왼쪽 자식들 또는 오른쪽 자식들이면 p와 g의 간선 연결을 회전시키고 그 다음에 x와 p의 간선 연결을 회전시킨다

 Splay 트리의 Splay 연산
 - Zig-Zag : 만약 p가 루트가 아니고 x가 왼쪽 자식, p가 오른쪽 자식(또는 그 반대) 이면 x와 p의 간선 연결을 회전시키고 그 다음에 x와 x의 새로운 부모g와의 간선 연결을 회전시킨다

 Splay 트리의 연산 (Zig회전(단일 회전))
 - Zig : p가 트리의 루트 노드이면 p와 x의 간선 연결을 회전시킨다

 Splay 트리의 연산 (Zig-Zig 회전(두개의 단일 회전)
 - Zig-Zig : p가 루트가 아니고 x 와 p가 동일하게 왼쪽 자식들 또는 오른쪽 자식들이면 p와 조부모 g와의 간선 연결을 회전시키고 그 다음에 x와 p의 간선 연결을 회전시킨다

3. AVL 트리
 변형 BS 트리 - AVL트리
 - 노드의 삽입과 삭제가 일어날 때, 노드의 키 값과 서브트리 키값사이의 관계를 유지하면서 균형을 유지하는게 쉽지않음

 개념
 - 제한 조건을 완화하여 (완전한) 균형이 아닌 것을 허용함
 - 무너진 균형의 정도는 작아야 하고, 평균 탐색 길이도 완전 균형 트리의 탐색 길이와 크게 차이가 나지 않아야 함
 - 거의 완전한 균형 트리의 한 형태로 높이가 균형잡힌 높이 균형 트리
 - 직접 탐색 성능이 매우 좋음

 조건
 - 노드 vi 의 왼쪽 서브트리 높이와 오른족 서브트리 높이가 최대 1만큼 차이가 남
 - 노드 1삽입(균형이 깨짐) -> 허용
 - AVL 트리(높이 균형 트리) 높이가 대략 균형잡힌 트리

4. BB 트리
 정의
 - 거의 완전히 대략 균형잡힌 트리와 다른 종류로 무게가 균형 잡힌 트리
 - 각 노드의 양쪽 서브트리 무게가 균형을 유지하는 트리
  √2 - 1 < 왼쪽 서브트리의 무게/ 오른쪽 서브트리의 무게 < √2 + 1
 - β 는 균형을 제어하기 위한 인수
 - 균형 β (0 < β < 1/2) 라는 것은 임의의 노드 x대해 x의 한 쪽 서브트리에 x의 자식 노드 수의 비율이 β 와 1-β 사이에 있도록 제한 하는 경우
 - 만일 β = 1/2 면 왼쪽 서브트리와 오른쪽 서브트리는 같은 수의 노드를 가져야 함
 - 극단적으로 무게가 완전히 균형 잡힌 상태

 균형 트리
 - AVL 또는 BB트리에 대하여
   각각 무게 또는 크기(높이)제한을 만족시키는 데 드는 비용은 트리를 완전히 균형잡히게 유지하는 비용이나 노력보다 훨씬 작음
 - 삽입이나 삭제 후에 트리를 완전히 균형잡히게 유지하기 위해서는 O(n)의 노드를 옮겨야 하는 반면에
   AVL 또는 BB트리는 O(log2n)개의 노드를 옮기는 되는 것으로 알려져 있음