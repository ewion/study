학습개요
파일이 가진 속성으로 파일을 찾고 검색된 파일을 대상으로 특별한 액션을 수행할 때 find 명령을 사용한다.

학습목표
저장 장치에 여러 파티션을 만들고 관리할 수 있다.
파일 시스템의 마운트와 언마운트 명령을 설명할 수 있다.
LVM 도구를 사용하여 볼륨을 만들고 사용할 수 있다.
리눅스 파일 시스템의 구조와 종류를 설명할 수 있다.

정리하기
부팅 시 자동으로 마운트되는 파일 시스템의 목록이 /etc/fstab 파일에 기록되어 있다.
파티션 관리를 위해 parted 또는 fdisk 명령을 사용한다.
개념적으로 논리 볼륨은 기존 파티션과 일치하는데 크기를 조정할 수 있다.
inode 테이블에서 한 레코드는 이름을 제외한 개별 파일의 모든 정보를 가지고 있다.
파일 시스템의 종류에 따라 파일 시스템의 용량, 파일 이름의 길이, 파일의 최대 크기와 총수, 파일의 복구·성능·유연성 등이 차이가 난다.
mkfs 명령을 사용하여 파티션에 다양한 종류의 파일 시스템을 생성할 수 있다.

1. 마운트 언마운트
 마운트
 - 파일 시스템을 전체 디렉터리 구조에서 특정 디렉터리에 연결하는 것
  저장 장치에 파티션이 존재하며 파티션에 파일 시스템을 만들어져 있음
 - 마운트되는 위치를 마운트지점이라고 함

 /etc/fstab 파일
 - 리눅스 시스템이 부팅될 때 자동으로 마운트할 파일 시스템의 목록을 가진 설정 파일
  각 라인마다 개별파일시스템의 마운트 정보가 기록되어 있음
 - 라인 구성하는 항목의 의미
  디바이스              장치의 이름으로 디바이스 파일 도는 UUID가 사용
  마운트 지점            파일 시스템 트리에서 디바이스가 부착되는 위치
  파일 시스템 유형        리눅스에서 허용하는 파일 시스템의 유형
  옵션                  마운트 옵션으로 mount명령에서 -o옵션을 사용하는 것과 같음
  덤프 여부             백업을 위한 것으로 0은 덤프안함, 1은 덤프함
  파일 시스템 검사 여부  파일 시스템 검사를 위한 것으로 0은 검사안함, 루트(/)파일시스템의 경우 1일때 나머지 파일시스템의 경우 2일때 검사

 마운트와 /etc/fstab 파일
 - UUID는 파일 시스템을 유일하게 구분하는 숫자(32자리 16진수)
  블록 디바이스의 정보를 보여주는 blkid 명령 또는 lsblk -f 명령으로 확인할 수 있음
 - 마운트 또는 언마운트를 하면 내용이 /etc/mtab파일에 기록
  옵션 없이 단순히 mount 명령을 사용하면 현재 마운트되어 있는 파일 시스템을 보여줌
 - 기본 마운트 옵션(defaults)는 rw, suid, dev, exec, auto, nouser, async가 적용
  mount 명령에서 옵션 -o를 사용할 때 적용할 수 있음

 mount 명령
 - 파일 시스템을 마운트 하는 명령
  파일 시스템을 지정된 디렉터리에 붙여 파일 시스템을 사용할 수 있게 함
 - mount a [options] [-t type]
  -a 는 /tec/fstab 파일에 기록된 모든 파일 시스템을 마운트 함
  -t 가 추가되면 해당 유형의 파일 시스템만 마운트
 - mount [options] [-o monut_options] device|directory
  -a 가 사용되지 않으면 지정된 장치에 해당하는 것을 찾아 마운드
  -o 는 파일 시스템을 마운트할 때 사용할 옵션
 - 다음은 /etc/fstab 파일과 무관한 일반적 마운트 방법임
 - mount [options][-t type][-o mount_options] device|directory
  마운트 명령을 실행하기 전에 마운트 지점을 생성해야 함
  해당 장치가 존재하는지, 파일 시스템 유형이 맞는지 확인
  존재한다면 /etc/fstab 파일에서 해당 파티션에 지정된 옵션을 적용하고 옵션 -o에서 주어진 것을 적용하며 사용되었다면 -r 또는 -w를 적용
 - 예
  mount -t ext4 /dev/sdb1 /mnt/data1
  mount -t iso9660 -o ro /dev/sr0 /media/cd
  mount -t vfat /dev/hda3 /mnt/win98

 unmount 명령
 - 디렉터리에 마운트되어 있는 저장장치를 해당 디렉터리로부터 분리
 - unmount -a [-nv][-t]
 - unmount [-nv] device|directory

2. 파티션관리
 파티션
 - 물리적 저장장치를 논리적으로 분할한 고정 크기의 구역
  하나의 디스크에 여러개의 파티션 생성 가능
 - 파티션은 자신만의 디바이스 파일을 가짐
  하나의 파티션을 독립적 저장 장치처럼 사용할 수 있음
  첫 번째 SCSI디스크는 /dev/sda
  그리고 첫 번째 파티션은 /dev/sda1, 두번째는 /dev/sda2,...
 - 전통적 MBR 유형 파티션 테이블은 4개의 프라이머리 파티션 저장 가능

 디스크를 여러 파티션으로 분할하여 사용하는 이유
 - 멀티부팅을 위해 여러 운영체제를 별도의 파티션에 설치
 - 특정 파티션이 손상되도 다른 파티션의 데이터는 보존
 - 파티션 별로 다른 파일 시스템을 만들 수 있음
 - /boot 영역을 별도의 파티션으로 분리하여 빠르게 부팅
 - /var 영역을 별도의 파티션으로 만들어 루트(/) 영역의 가용 공간이 줄어드는 문제 방지
 - 가상 메모리로 사용될 스왑 영역을 별도의 파티션으로 구성

 파티션 관리 도구
 - 파티션과 파티션 테이블을 관리하는 프로그램
  MBR유형 파티션 테이블은 파티션의 최대 크기에 제약있음
  최근 운영체제는 GPT유형의 파티션 테이블 지원
 - 파티션 생성 삭제 이동 크기변경 및 복사기능을 제공
  파일시스템을 관리할 때에는 다른 도구 사용
 - 종류
  fdisk는 전톡적 텍스트 기반 대화식 도구로 GPT는 지원하지 않음
  parted는 MBR과 GPT모두 지원
  gdisk는 GPT지원, gparted는 parted의 그래픽 버전
 - parted -l 또는 fdisk -l 명령은 모든 블록 디바이스에서 파티션 정보를 보여줌
  parted /dev/sda를 수행후 서브 명령으로 p수행 가능

 파티션 만들기
 - 저장장치를 실제로 사용하려면 파티션을 만들고 파일 시스템을 만들어 주어야 함
  parted or fdisk 명령을 사용하여 파티션 생성 가능
  이어서 mkfs 명령으로 파일시스템 생성
 - 연습을 위해 다음 방법 사용
  가상머신에 하드디스크 추가
  VMware 메인 창에서 [Edit virtual machine settings] > 설정 창에서 [Add] > 하드웨어 타입에서 'hardDisk' > [Next] 실행
  또는 가상 머신에 USB메모리 장착
  가상 머신 메뉴에서 마운트 가능
 - 저장 장치의 이름을 알아보기 위해 ls /dev/sd*, parted -l 또는 tail -f /var/log/messages 명령 사용 가능

3. 볼륨관리
 볼륨
 - 크기가 재조정될 수 있는 파티션
 - 물리적으로 분리된 여러 디스크를 합쳐 볼륨을 만들 수 있음
 - 용어
  물리 볼륨은 하나의 물리적 디스크
  볼륨 그룹은 여러 물리 볼륨을 하나로 묶은 것으로 가상의 하드디스크
  논리 볼륨은 볼륨 그룹에서 가용한 공간을 분할 한 것으로 개념적으로 기존 파티션과 일치
  물리 볼륨은 물리 익스텐트로 나누어져 있으며 논리 볼륨은 (LE)로 나뉘어짐

 논리 볼륨 만들기
 - 하드디스크에서 파티션 생성
 - 하드디스크의 파티션을 물리볼륨으로 만듬
 - 하나 이상의 물리 볼륨을 묶어 볼륨 그룹을 만듬
 - 볼륨 그룹 안에서 논리 볼륨 생성
 - 논리 볼륨에 파일 시스템을 생성하고 마운트하여 사용

 LVM 유틸리티
 - 볼륨 관리 도구
 - 여러 저장장치에 각각 물리 볼륨을 만들고 이것을 합쳐 볼륨 그룹(저장장치풀)을 구축
 - 볼륨 그룹을 여러 논리 볼륨들로 나누어 사용
 - 명령어
  pvcreate      파티션을 초기화 하여 물리볼륨으로 만듬
  pvdisplay     물리 볼륨 속성 출력
  vgcreate      명령 pvcreate로 만든 블록디바이스로부터 새로운 볼륨그룹을 생성
  vgextend      기존 볼륨 그룹의 크기를 느리기 위해 물리 볼륨 추가
  vgdisplay     볼륨 그룹 속성 출력
  lvcreate      볼륨 그룹에서 새로운 논리 볼륨 생성
  lvdisplay     논리 볼륨 속성 출력

4. 파일시스템
 개요
 - 저장 장치를 디렉터리 구조로 조직화하고 파일에 이름을 부여하는 등의 파일의 저장과 검색을 위한 체계
 - 파일 시스템의 종류에 따라 파일 시스템의 크기, 파일이름 길이, 파일크기, 파일 총 개수, 파일복구, 성능/보안/유연성에 차이가 남

 파일 시스템 구조
 - 유닉스 계열의 운영체제에서 사용하는 파일 시스템의 기본 구성 요소
  하드디스크 : MBR   파티션     파티션2        파티션3
  파티션 : 부트블록    슈퍼블록    inode테이블    데이터블록
  inode테이블 :  inode번호   데이터블록번호   메타데이터
  데이터 블록
 - 슈퍼블록
  파일 시스템의 특징을 기록한 블록
  블록크기, 전체블록개수, inode테이블 크기와 위치, 디스크 블록 맵, 첫번째 데이터블록의 주소등
 - inode테이블
  inode리스트라고도 함
  하나의 inode(레코드)는 한개 파일의 이름을 제외한 모든 정보를 가짐
  inode번호, 파일형태, 크기, 접근권한, 소유자, 소유그룹, 수정시간, 링크수, 디스크 블록의 위치 등
  디렉터리나 특수파일도 하나의 파일로 간주됨
 - 데이터 블록
  일반 파일의 경우 실제 데이터 저장됨
  디렉터리의 경우 포함된 파일의 이름이 inode번호와 함께 저장됨

 파일 시스템 유형
 - 유형
  ext4     리눅스 전용 파일시스템으로 범용 파일시스템. ext2, ext3의 개선된 버전으로 최대 크기는 1EiB 최대 파일 크기는 16TiB 저널링을 통한 신뢰성, 온라인 단편화 제거, 하위 호환성 등 기능
  iso9660  시디롬과 같은 광학디스크에서 사용되는 표준 파일 시스템
  vfat     윈도우 운영체제와 호환되는 파일 시스템으로 usb에서 주로 사용
  HFS+     매킨토시에서 사용되는 표준 파일 시스템
  Btrfs    리눅스의 차세대 파일시스템
  XFS      고성능으로 대용량 파일(또는 파일시스템)을 사용하기 위한 파일 시스템
 - 커널이 사용하는 가상 파일 시스템과 네트워크 파일 시스템도 존재

 mkfs 명령
 - 파티션이나 논리 불륨에 리눅스 파일 시스템을 만드는 명령
 - mkfs [-t fs-type] device
  옵션 -t fs-type을 사용하여 파일시스템의 종류 지정
  device는 /dev/sbd1 과 같은 파티션의 장치이름 또는 논리볼륨의 이름
 - 실제 mkfs 명령은 'mkfs.종류이름'을 사용하여 수행
  코드의 재사용을 높이려는 목적으로 기본은 /sbin/mkfs.ext2

 fsck 명령
 - 파일시스템의 무결성을 검사하고 손상된 파일을 고치는 명령
  마운트되어있지 않은 파일 시스템을 검사
  문제가 있다면 대화식으로 파일 시스템 복원
  파일 시스템의 'lost+found'디렉터리에 손상된 파일이 남아 있을 수 있음
 - fsck [options] device
 - e2fsck 와 같은 파일시스템 고유의 검사 프로그램이 존재할 수 있음

 스왑영역
 - 특정 파티션이나 파일을 스왑 영역으로 지정하여 사용할 수 있음
  메모리 사용량을 확인하는 free명령으로 스왑 메모리도 알 수 있음
 - 파티션을 스왑영역으로 사용할 때
  빈 파티션 만듬
  mkswap device를 수행하여 스왑 파티션으로 함
   지정한 특정 장치나 파일을 리눅스용 스왑 영역으로 지정
  swapon device를 수행하여 활성화시킴
   free명령으로 스왑 영역의 공간을 확인할 수 있음
  부팅할때마다 사용하려면 /etc/fsab 파일에 기록함
 - 파일 스왑영역으로 사용할 때
  교재ㄱㄱ

 df 명령
 - 마운트 되어 있는 파일 시스템의 공간 사용 정보를 보여줌
 - df [options][names]
  인수 names는 장치 이름또는 마운트 지점
 - df [options][names]
  -h 용량의 단위를 KB MB GB 단위로 보여줌
  -T 파일 시스템의 유형 포함하여 출력
  -i 는 inode 사용량 보여쥼

 du 명령
 - 디렉터리 또는 특정 파일의 디스크 사용량을 표시
 - du [options][directories]
  인수 directories는 특정 파일 또는 디렉터리
  기본적으로 하위 디렉터리를 포함하고 1KiB단위로 출력
 - 옵션
  -a 디렉터리 외에 파일의 디스크 사용량도 출력
  -s 주어진 디렉터리 도는 파일만의 총 사용량을 요약하여 출력

