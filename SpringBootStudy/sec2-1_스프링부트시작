containerless 컨테이너리스
 웹 컨테이너 = 서블릿(자바)
 스프링도 컨테이너, 서블릿 컨테이너 뒤쪽에 존재하면서 서블릿에서 들어온 요청을 빈이 동작
 스프링 컨테이너가 서블릿 컨테이너 대부분을 대체하지만 서블릿컨테이너가 없는것은아님
 스프링부트는 서블릿컨테이너에 들이는 수고를 제거해줌(컨테이너리스)
 실제로는 서블릿 컨테이너가 동작(web.xml)

Opinionated 어피너네이티드
 스프링 부트는 자기주장이 강함(Opinionated)
 스프링부트가 다 정해줄테니까 개발자는 개발만

 스프링 부트의 설계 철학
 - 극단적 유연함 추구
 - 다양한 관점 수용
 - Not Opinionated
 - 수많은 선택지를 모두 포용
 - 그러나...
 - 자기 주장이 강함
 - 정해주는대로 빠르게 개발하고 고민 나중에
 - 스프링을 잘 활용하는 뛰어난 방법 제공

 스프링부트는 업계에서 검증된 스프링 생태계 프로젝트, 표준 자바기술, 오픈소스 기술의 종류와 의존관계, 사용 버전을 정해줌
 각 기술을 스프링에 적용하는 방식(DI구성) 과 디풀트 설정값 제공

스프링 부트의 이해

2-1
서블릿 코드 중 중복되서 나타내는 것이 나타남 -> 통합 요구
서블릿이라는건 요청과 응답을 직접적으로 다루어야하기 때문에 자연스럽지 않음, 기본적인 서블릿으로만 개발하기 난항 -> 프론트 컨트롤러의 등장

프론트 컨트롤러
원래는 서블릿은 각 유알엘에 맞게 매핑하여 동작
공통적인 로직을 앞단에서 처리