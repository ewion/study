0:01:26 ---> 1.프로그래밍 언어란 무엇인가?
0:12:17 ---> 2.프로그래밍 언어의 기능
0:26:42 ---> 3.프로그래밍 언어의구성 요소
0:43:25 ---> 4.프로그래밍 언어의 학습 방법

프로그래밍 언어란
 사람이 기계에게 의사를 전달하는 언어, 단방향성 언어
 프로그래밍언어는 컴퓨터가 수행할 수 있고 사람이 읽을 수 있는 형태로 계산을 나타내는 표기 체계

프로그래밍 언어의 기본 기능
 작성력 : 프로그래머의 의도를 나타낼수있도록 하는 기능
 가독성 : 프로그램을 쉽게 해독할 수 있도록 하는 기능
 실행 가능성 : 컴퓨터에서 실행 될 수 있도록 하는 기능

프로그래밍 언어의 부가 기능
 추상화 : 어떤 대상을 간력하게 추려 나타내는 방법 (java의 추상클래스, 인터페이스)
 모듈화 : 복잡한 대상을 나누어 구성할 수 있는 방법 (객체지향프로그래밍의 기본)

프로그래밍 언어의 특성
 기계적 : 기계적으로 처리할 수 있어야 함 (엄밀한 규칙에 따라 정의)
 구조적 : 복잡한 구조를 나타 낼 수 있어야함 (자료구조, 제어구조)
 가변적 : 시대의 필요에 따라 바뀔 수 있어야 함 (Python은 본디 명령형 언어였으나 -> 객체지향개념을 탑재)

 추상화가 잘됨(사람친화적)~            추상화X
 고급언어        -> 저급언어        -> 기계어
 Python,Java,C...   C,    어셈블리어

프로그래밍 언어의 구성 요소
 데이터, 연산, 명령어, 서브프로그램, 타입, 모듈

데이터
 자료를 프로그램이 처리 할 수 있는 형태로 나타낸 것
 수, 문자, 문자열, 멀티미디어 등
 데이터의 분류
 - 이진 데이터 : 이진수의 나열로 이루어진 데이터
 - 텍스트 데이터 : 문자열을 나타내는 데이터

연산
 데이터 처리 방법
 연산 적용 후 새로운 데이터를 결과로 얻음
 용어 정의
 - 연산자 : 특별한 연산을 수행하는 함수
 - 변수 : 연산 결과를 저장하는 이름
 연산 표현 구조
 - 수식 : 값을 나타내는 구조
 - 문장 : 처리를 나타내는 표현

명령어
 특정 작업을 지시하는 단어
 if , while 등...

연산 및 명령어
 대부분의 프로그래밍 언어는 다양한 연선자와 명령어를 통해 수식과 문장을 구성
 연산의 종류
 - 원시연산 : 언어가 기본적으로 제공하는 연산 (+, -, /등)
 - 사용자 정의 연산 : 프로그래머가 추가로 정의한 연산
 - 라이브러리 : 사용자가 자주 사용할 만한 연산을 미리 정의해 둔 것

서브 프로그램
 전체 프로그램을 이루는 작은 코드 블록에 이름을 붙인것
 서브루틴이라고도 함
 서브프로그램 분류
 - 함수 : 연산 수행결과 값을 반환하는 서브프로그램
 - 프로시저 : 결과값을 반환하지 않는 서브프로그램

타입
 데이터 집합과 연산 집합을 합친 개념
 연산의 안전성 보증을 위해 필요
 타입 안정성
 - 함수 f의 타입이 f(x):A -> B라면 a < A에 대해 f(a) < B여야함
 프로그래밍 언어의 분류
 - 강타입 언어 : 타입 오류를 모두 검출하는 언어 (ex : 문자열타입과 정수타입 연산 불가, 대부분의 언어)
 - 약타입 언어 : 일부 타입 오류를 허용하는 언어 (ex : 정수와 실수 연산 가능, C언어 java의 일부분)
 - 무타입 언어 : 타입 선언문도 없고 어떤 대상의 타입이 계속 변경될 수 있는 언어 (ex : 파이썬)

모듈
 독립적인 프로그램 구성 단위
 서브프로그램도 모듈의 일부
 특징
 - 내부와 외부를 구별하여 독자적인 이름 공간을 가짐
 - 변수, 함수, 타입등 프로그래밍 언어에서 제공하는 거의 모든 것을 포함하는 단위

