5장 요청과 응답
 1. JSP처리 과정

 2. request 내장 객체
  1) request 내장 객체
  클라이언트의 요청을 표현하는 JSP 내장 객체
  HttpServletRequest 유형

  request 내장 객체의 기능
  -클라이언트와 서버관련 정보 읽기
  -클라이언트가 전송한 데이터(파라미터) 읽기
  -클라이언트가 전송한 헤더, 쿠키 정보 읽기
  -속성의 처리

  2) 클라이언트 및 요청 관련 정보 읽기
  메서드
  getRemoteAddr() return String 클라이언트 컴퓨터의 ip주소 리턴
  getContentLength() return long 클라이언트가 전송한 요청몸체의 길이 리턴
  getCharacterEncoding() return String 클라이언트가 요청몸체를 전송할 때 사용한 문자열 인코딩을 리턴
  getContentType() return String 클라이언트가 요청 몸체를 전송 할 때 사용한 문서타입을 리턴
  getProtocol() return String 클라이언트가 요청에서 사용한 프로토콜을 리턴
  getMethod() return String 클라이언트가 데이터를 전송할 때 사용한 요청방식 리턴
  getContextPath() return String JSP페이지가 속한 웹애플리케이션의 경로를 리턴
  getServerName() return String 연결할 때 사용한 서버주소 리턴
  getServerPort() return int 연결할 때 사용한 서버포트번호 리턴

  3) HTML 폼
  사용자가 데이터를 입력하기 위한 틀
  요청과 함께 서버로 데이터 전송가능
  텍스트필드, 체크박스, 라디오버튼, 제출버튼등의 요소 포함

  폼과 request 객체
  폼에 입력된 정보는 파라미터로 전송됨
  JSP페이지에서는 request객체를 이용하여 사용자가 보낸 데이터(파라미터)를 읽고 처리 가능

  4) 요청 파라미터 읽기
  메소드 설명
  getParameter(String name) return String 입력 폼을 통해 전송된 이름이 'name'인 파라미터 값을 리턴, 값이 없을 시 null리턴
  getParameterValues(String name) return String[] 이름이 'name'인 파라미터의 모든 값을 배열로 리턴한다. 값이 없을 시 null리턴
  getParameterNames() return Enumeration 웹 브라우저가 전송한 파라미터 이름을 리턴
  getParameterMap() return Map 웹브라우저가 전송한 파라미터를 Map형식으로 리턴한다.

  5) GET 데이터 전송 방식
   get요청은 특정 자원을 단순히 가져 오는것을 의미함
   - 단순한 질의, 검색에 사용
   - <a>태그를 사용할 때 또는 <form>태그에서 method속성값이 "get"일때
   URL뒤에 쿼리 문자열을 붙여 요청함
   - URL에 정보가 노출됨
   길이에 제한(4K이하)이 있으며 보안에 취약함
   파라미터를 포함한 북마크 가능

  6) POST 데이터 전송 방식
   HTTP 메시지의 몸체(body)에 데이터를 전달
   <form>태그에서 method속성의 값이 반드시 "post"어야 함 (디폴트 값이 get이므로 아무것도 적지 않으면 get요청)
   길이의 제한이 없으며 보안이 상대적으로 유라함
   - 게시글 포스팅, 암호 또는 신용카드등 민감정보 보낼 때
   브라우저 히스토리에 남지 않으며 북마크 불가능

  7) 요청 헤더 정보처리
  메소드 설명
  getHeader(String name) return String 지정한 이름의 헤더값을 리턴
  getHeaders(String name) return Enumeration 지정한 이름의 모든 헤더값을 리턴
  getHeaderNames() return Enumeration 모든 헤더의 이름 리턴
  getIntHeader(String name) return int 지정한 헤더의 값을 정수로 리턴
  getDateHeader(String name) return long 지정한 헤더의 시간 값으로 리턴. 이 때 시간은 1970년 1월1일 이후로 흘러간 1/1000초 단위의 값을 가짐

 3. response 내장 객체
  1) response 내장 객체
  클라이언트에 응답 제공하기위해 HttpServletResponse 인터페이스를 구현한 객체

  response 내장 객체의 기능
  - 응답 헤더 정보 설정하기 setHeader()
  - 다른 페이지로 이동시키기 sendRedirect()
  - 쿠키 추가 addCookie()
  - 상태 코드 설정하기 setStatus()
  - 응답 몸체를 만들기 위한 출력 스트림 제공 getWriter() 또는 getOutputStream()

  2) 응답 헤더 정보 설정하기
  메소드 설명
  addHeader(String name, String value) void name헤더에 value를 값으로 추가
  addIntHeader(String name, int value) void
  setHeader(String name, String value) void
  setIntHeader(String name, int value) void
  containsHeader(String name) boolean
  setContentType(String type) void

  3) 웹 서비스와 캐시
  응답 캐시의 사용
   서버에 요청을 하지 않고 캐시에 있는 데이터를 사용하여 응답하는 것
   - 빠른 응답 가능
   - 서버 로드와 네트워크 사용의 감소
   - 내용 변경이 없는 페이지는 캐시를 통해 빠른 응답을 제공
   내용 변경이 빈번한 사이트의 경우 캐시가 적용되면 잘못된 결과를 응답으로 제공 할 수 있음

  응답 헤더에서 캐시와 관련된 필드
   Cache-Control
   - Http 1.1에서 지원
   - 브라우저가 응답을 캐시할 것인지를 지정
   - "no-cache"로 지정하면 캐시에 있는 내용으로 응답을 제공하지 않음
   - "max-age=3600"과 같이 초 단위로 설정 가능

   Pragma
   - Http 1.0에서 지원
   - 예시
        <%
          response.setHeader("Pragma", "no-cache");
          response.setHeader("Cache-Control", "no-cache");
          response.addHeader("Cache-Control", "no-store");
        %>

   4) 다른 페이지로 강제 이동시키기
   response.sendRedirect(String location)
   다른 페이지로 강제 이동시키는 redirect 기능
   웹 서버가 웹 브라우저에게 다른 페이지로 이동을 지시
   요청에 대한 임시 응답이 가고, 브라우저가 재차 URL요청을 하게 됨
   - 상태 코드 302, 응답 헤더 Location에 이동될 URL이 들어 있음
   - <jsp:forward>와 차이 있음
   이동 URL의 요청 데이터에 특문 이나 한글이 있으면 인코딩 필요
   - URLEncoder.encode(String s, "UTF-8")사용
