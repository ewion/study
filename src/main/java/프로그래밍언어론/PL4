학습개요
프로그래밍 언어의 두 가지 측면으로 프로그램 형태에 관한 이론인 구문론과 프로그램 수행 의미에 관한 이론인 의미론이 있음을 앞에서 배웠습니다. 이번 강의에서는 프로그래밍 언어의 형식적 정의를 위한 구문론과 의미론에 대해 본격적으로 알아봅니다. 우선 구문론과 의미론의 개념을 살펴본 후, 구문을 표현하는 방법과 의미를 표현하는 방법에 대해 학습합니다. 특히 구문의 표현법인 BNF, EBNF, 구문 도표에 대해서는 자세히 알아봅니다.

학습목표
프로그래밍 언어의 형식적 정의를 위한 구문론과 의미론의 개념을 설명할 수 있다.
구문의 표현에 이용되는 BNF, EBNF, 구문 도표를 설명할 수 있다
의미의 표현에 이용되는 다양한 방법을 설명할 수 있다.

정리하기
1. 프로그래밍 언어는 문장을 정확하게 이해할 수 있도록 명확한 구문과 그 의미가 정의되어야 한다. 이를 프로그래밍 언어의 형식적 정의라 하며 이는 다시 구문론과 의미론으로 나눌 수 있다.
2. 구문론은 프로그램의 표면적인 구조를 정의하는 것으로, 프로그램 작성 시 어떤 형태로 작성해야 하는지를 기술한다.
3. 의미론은 프로그램의 내용적인 효과를 정의하는 것으로, 프로그램 실행 시 어떤 일이 일어나는지 그 의미를 기술한다.
4. 프로그래밍 언어에서 구문은 문맥 자유 문법으로 표현된다. 문맥 자유 문법이란 문맥에 영향을 받지 않는 문법을 의미한다.
5. 문맥 자유 문법을 표현하는 방법으로 BNF, EBNF, 구문 도표가 있다.
6. 프로그래밍 언어에서 의미는 자연어로 표현되는 경우가 많지만, 엄밀한 표현을 위한 형식 의미론도 존재한다.
7. 형식 의미론에서 다루는 표현 방법으로는 속성 문법, 기능적 의미론, 표기적 의미론, 공리적 의미론이 있다.

1. 구문론과 의미론

 프로그래밍 언어의 형식적 정의
 - 프로그래밍 언어의 명확한 구분과 의미 정의
 - 이를 통해 명확한 사용체계 제공
 - 형식적 정의의 필요성
  컴퓨터 : 프로그램 해석의 모호함 제거
  작성자 : 프로그램의 동작 예측 가능
 - 프로그램의 구조
  문자 : 영어 알파벳 아라비아 숫자 특수기호 등
  어휘 : 토큰이라고도 불림, 문자의 모임. 최소한의 의미를 갖는 단어
  구문 : 프로그램을 작성하는 규칙

2. 구문의 표현
 구문론
 - 프로그램의 표면적 구조 정의
 - 정의된 구문을 통해 모든 정상적인 프로그램 도출
 - 작성된 프로그램이 정의된 구문에 맞는 프로그램인지 확인
 - 구문의 표현

 문맥자유문법(CFC : Context-Free Grammar)
 - 구성 요소
  비단말 기호 : 정의될 대상
  단말 기호 : 언어에서 직접 사용되는 표현
  시작 비단말 기호 : 언어에서 독립적으로 사용될 수 있는 단위
  규칙 : 비단말 기호를 단말 기호와 비단말 기호의 조합으로 정리. 문법

 문맥 자유 문법의 다양한 표현 방법
 - BNF
 - EBNF
 - 구문 도표

 BNF (Backus-Naur Form)
 - Algol의 구문을 정의하기 위해 사용된 표현법
 - 세가지 메타 기호
  ::= 정의 ( = )
  | 택일
  < > 비단말 기호

 EBNF (Extended Backus-Naur Form)
 - BNF에 추가적인 메타 기호를 사용하여 규칙을 간결하게 표현
 - 추가된 메타 기호
  [ ] 생략 O
  { } O번이상 반복
  ( ) | 와 함께 쓰여 한정된 범위의 택일
  ' ' 메타 기호를 단말 기호로 사용

 구문 도표
 - 초기 Pascal의 사용자 설명서에 사용된 표현번
 - 순서도와 유사하게 그림으로 구문 표현
  네모 : 비단말 기호 (정의될 대상)
  동그라미 : 단말 기호 (언어에서 직접 사용되는, 정의된 표현 if나 수식 등)
  화살표 : 비단말 기호 및 단말기호를 연결. 규칙

  정의될 대상이 되는 비단말 기호 작성

3. 의미의 표현
 의미론
 - 프로그램의 내용적 효과 저으이
 - 프로그램 실행 시 어떤일이 일어나는지 그 의미를 기술
 - 구문으로 표현하기 어려운 제약사항을 기술하기도 함
 - 의미의 표현
  일반적으로 자연어 문장으로 표현하나 명확성 부족
  의미의 엄밀한 표현을 위한 다양한 기법 개발

 형식 의미론
 - 정적 의미론
  프로그램을 수행하기 전 의미가 맞는지 파악
  주로 타입검사 수행에 활용
  대표적 방법 속성문법
 - 동적 의미론
  프로그램 수행 시 나타나게 될 의미를 표현
  대표적 방법 : 기능적 의미론 표기적 의미론 공리적 의미론

 속성 문법
 - 비단말 기호마다 타입 속성이 있다고 가정하고 이에대한 규칙을 정의

 기능적 의미론
 - 동적 의미론
 - 추상기계의 상태를 바꾸는 것으로 수행 의미를 표현
  프로그램이 수행되면 컴퓨터의 상태가 바뀜
 - 상태 : <수행할 명령어, 메모리 상태>

 표기적 의미론
 - 구문 요소를 수학적 표기에 대응시켜 수행 의미 표현
 - 의미함수 : 대응시키는 함수

 공리적 의미론
 - 프로그램의 효과로 수행의미를 표현
 - 효과 : 프로그램 S가 실행되므오써 사전조건 P를 사후조건 Q로 변화시킴. {P}S{Q}

 의미론의 한계 및 효과
 - 한계
  프로그래밍 언어 전체에 대한 의미표현은 너무 복잡
 - 효과
  프로그램의 구현 및 분석 등에 유용하게 사용됨
  속성방법 : 인터프리터 및 컴파일러 구현 시 트리 생성, 타입 검사, 코드 생성등을 할 때
  수학적 표기 : 언어의 특성을 명확하게 정의해야 할 때
  공리적 의미론 : 프로그램의 특정 조건 만족 여부를 확인 할 때
 - 프로그래밍을 수행 할 때 본격적으로 사용하기는 어려우나 제한적으로 사용, 교양 수준 정도로 알아둘 필요는 있음