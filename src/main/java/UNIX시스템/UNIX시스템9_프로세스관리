학습개요
프로세스 개념을 확인하고 프로세스의 실행과 관련이 있는 실행 파일(또는 디렉터리)의 특수 접근권한을 알아본다. 프로세스의 상태를 모니터링하고 관리하는 명령의 사용법을 학습한다. 그리고 주기적으로 수행되는 작업을 자동으로 수행하게 하는 cron 서비스를 학습한다.

학습목표
프로세스 개념과 프로세스의 상태 변화를 설명할 수 있다.
포어그라운드와 백그라운드 프로세스의 차이를 설명할 수 있다.
프로세스의 상태를 확인하고 관리하는 명령을 사용할 수 있다.
cron 서비스를 이용해 주기적으로 반복되는 작업을 실행할 수 있다.

정리하기
백그라운드 프로세스는 터미널로 출력을 보낼 수 있으나 키보드 입력은 받을 수 없다.
SetUID가 설정된 프로그램을 실행시키면 프로세스는 파일 소유자의 권한으로 실행된다.
kill 명령은 프로세스에 시그널을 보내는 명령이며 기본 시그널은 TERM이다.
top 명령을 사용하면 실시간으로 프로세스 상태를 확인하거나 관리할 수 있다.
주기적으로 수행되는 계획된 작업을 수행하고자 할 때 cron 서비스를 사용한다

1. 프로세스
 프로세스 정의
 - 커널에 등록되어 관리를 받는 실행중인 프로그램
  커널은 프로세스 관리 블록에 프로세스에 관한 정보 저장
  프로세스는 시스템 자원을 사용하며 여러 상태를 겪음
  각 프로세스는 유일한 PID를 가짐
 - 프로세스 예
  systemd 프로세스는 PID가 1
  로그인을 하거나 터미널 창을 열면 bash프로세스가 할당됨
  필요에 따라 프로세스는 자식 프로세스를 생성
  데몬 프로세스는 서비스 요청을 처리하기 위한 백그라운드 프로세스

 프로세스 관리 블록 (PCB)
 - 커널에 등록된 각 프로세스에 대한 정보를 저장하는 영역
 - PCB에 저장되는 정보
  PID PPID
  UID EUID GID EGID
  프로세스의 현재 상태
  프로세스 우선 순위
  프로세스가 사용중인 자원정보
  모든 대기 중인 시그널의 목록
  문맥 교환 정보

 명령의 실행과 프로세스 생성
 - 셸에서 명령을 실행하면 새로운 프로세스가 만들어져 처리됨
  시스템 호출 fork()를 호출하여 기존 부모 프로세스가 자신의 복사본 자식 프로세스 만듬
  자식 프로세스는 시스템 호출 exec에 의해 새로운 프로그램으로 대체되어 실행
  프로그램이 종료되면 자식프로세스 종료
  부모 프로세스는 보류 상태에 있다가 자식 프로세스가 종료되면서 깨어남
 - 예
  터미널 창에서 ls명령 실행하면
  셸은 fork() 호출하여 셸복사본(자식프로세스) 생성
  자식 프로세느는 exec(ls)호출하여 ls명령 실행
 - pstree명령은 프로세스 트리를 보여주는 명령

 포어그라운드(foreground) 프로세스
 - 셸 프롬프트에서 명령 실행하면 포어그라운드 모드로 수행됨
  포어그라운드 프로세스는 터미널에 대한 제어권을 가짐
  포어그라운드 프로세스는 키보드 입력 및 화면 출력 가능
  포어그라운드 프로세스가 끝나기 전에는 다른 명령 수행 불가
 - 포어그라운드로 실행 중인 프로세스 강제 중지하렴면 cnt+c
 - 포어그라운드로 실행 중에 cnt+z 하면 백그라운드로 전환되며 멈춤(또는 지연) 상태가 됨
  fg jobld 또는 bg jobld 명령 수행하면 실행상태가 됨

 백그라운드(background) 프로세스
 - 백그라운드로 실행하려면 셸 프롬프트에서 명령에 끝에 &을 추가하여 실행
  백그라운드 프로세스 실행하면 셸은 즉시 명령 대기 상태가 됨
  입력 없이 장시간 실행되어야 하는 경우 주로 사용
  터미널 창을 종료하면 연결된 모든 백그라운드 프로세스도 종료됨
 - 백그라운드 프로세스를 포어그라운드로 전환
  fg jobld 또는 bg jobld 명령 수행하면 실행상태가 됨
 - jobs 명령으로 백그라운드 프로세스의 상태 점검 가능
  jobs -| 명령은 PID를 함께 보여줌

 특수 권한
 - SetUID
  일반 사용자가 passwd명령으로 비밀번호 수정하면, 결국 /etc/passwd 또는 /etc/shadow 파일이 수정되어야 함(권한 상승 필요)
  실행파일에 SetUID 설정되어있으면 해당 파일이 실행 될 때 '실행시킨 사용자'가 아닌 파일의 소유자 권한으로 실행
  파일의 접근권한에서 소유자의 실행 권한에 x가 아닌 s가 표시
  설정 방법은 chmod 4755 file 또는 chmod u+s file
  해제 방법은 chmod 0755 file 또는 chmod u-s file

 - SetGID
  파일의 접근 권한에서 그룹의 실행 권한에 s가 표시됨
  SetGID가 설정된 파일을 실행하면 '실행자의 그룹 권한이'아닌 파일 소유자의 그룹 권한으로 실행
  디렉터리에 설정된 경우 그 디렉터리에 파일을 만들 때 파일의 소유 그룹이 디렉터리의 소유 그룹으로 지정됨, 그룹 구성원의 공유 공간으로 사용 될 수 있음
  설정 방법은 chmod 2755 file 또는 chmod g+s file

 - StickyBit
  파일의 접근권한에서 기타 사용자의 실행 권한에 t가 표시됨
  주로 공유 디렉터리에 설정되며, 누구나 그 디렉터리에 파일 생성 가능, 하지만 파일 소유자만 삭제 가능
  설정 방법은 설정 방법은 chmod 1777 file 또는 chmod o+t file

2. 프로세스 상태
 ps 명령
 - 프로세스의 현재 상태 확인 명령
  특정 순간에 활동중인 프로세스 상태 보여줌
 - ps [option]
  옵션 없이 ps명령을 실행하면 현재 터미널과 연결되어 있는 프로세스 중 프로세스의 EUID가 현재 사용자의 UID와 같은 프로세스를 선택하여 보여줌
  ps -ef 와 ps aux 명령은 모든 사용자의 모든 프로세스에 관한 많은 정보를 보여 줌
  결과에서 PPID는 부모의 PID, STIME 은 시작 시간, TTY는 터미널, TIME은 CPU누적 사용 시간

3. 프로세스 관리
 top 명령
 - 현재 실행 중인 프로세스의 모니터링과 관리를 위한 대화식 도구
  현재 실행 중인 개별 프로세스의 실시간 상황을 주기적으로 보여 줌
  ps 명령의 동적-대화식 버전
 - top [options]

 - 옵션
  -p delay는 초 단위 주기 지정
  -p pids와 -u user는 특정 프로세스나 사용자 프로세스로 한정
  -S 는 총 누적 CPU 사용 시간, 자식 프로세스 포함

 - 사용 예
  기본적으로 CPU사용량이 많은 프로세스 먼저 보여줌
  top 명령에서 헤더의 의미는 ps명령과 유사함

 - 대화식 서브 명령
  space bar : 화면 갱신
  k : kill 명령 수행
  r : renice 명령 수행
  u : 명령 옵션에서 -u의 의미와 같음
  M : %MEM 값으로 정렬
  N : PID 값으로 정렬
  P : %CPU값으로 정렬
  T : Time+값으로 정령
  q : top 명령 종료

 kill 명령
 - 프로세스에 시그널 보내는 명령
  다른 프로세스에게 시그널 보내도록 커널을 요청하는 것
  시그널은 프로세스 관리 방법이고 프로세스 간 통신 수단
  여러 종류의 시그널이 존재하며 기본 시그널은 TERM임
 - kill [-signal] pids
 - kill [-s signal] pids

 killall 명령
 - 특정 프로세스에 한꺼번에 시그널을 보내는 명령
 - killall [options][-s signal][-u user] names
  프로그램이나 프로세스의 이름 사용

 nice와 renice 명령
 - nice 우선순위 (NI) 값을 조정하는 명령
 - NI 값은 -20(가장 우선) ~ 19 (가장 낮음)
  우선순위가 높으면 CPU를 점유할 확률이 높음
  기본값 0
 - nice[option][command]
  명령을 실행 할 때 NI값을 조정하는 명령
  일반 사용자는 NI값을 0이상으로만 지정 가능
 - 옵션
 - renice priority [options]
 - 옵션
  -p pid
  -g gids
  -u users

 nohup 명령
 - HUP시그널과 무관하게 백그라운드 명령이 스스로 종료될 때 까지 계속 수행시키는 명령
 - nohup 명령을 실행하는 경우 명령 행에 끝에 &를 붙여 백그라운드로 실행
 - 예
  nohup find -size +100k >log.txt.&
  표준 출력과 표준 에러 출력이 필요한 경우 ~/nohub.out에 리다이렉션되어 덧붙여짐

 프로세스 관리를 위한 GUI
 - 데스크탑 메뉴에서 프로그램>시스템도구>시스템정보 실행

4. cron 서비스
 지정된 시간에 주기적으로 자동 수행되는 작업을 수행
 crond 데몬 프로그램이 서비스 제공
  1분 간격으로 crontab파일 검사하여 수행
  crontab파일은 cron작업의 리스트를 가지며 cron작업의 수행 방법 기록되어 있음
 cron 서비스를 이용한 자동 스케줄
  /etc/crontab 파일과 /ect/cron.d/ 디렉터리에 존재하는 파일
  시스템 수준에서 주기적으로 수행될 작업 설정
 crontab 명령
  개별 사용자는 crontab -e 명령을 이용하여 주기적으로 수행될 작업을 설정할 수 있음

 crontab 파일의 형식
 - 환경 변수 설정과 cron작업의 수행 방법 정의
 - 항목의 의미
  분, 시, 날짜, 달, 요일
  *은 매번
  간격 표시를 위해 /
  범위 표시를 위해 -와,
  사용자는 시스템 수준 crontab 파일의 경우에만 지정
  run-parts는 지정된 디렉터리에 있는 스크립트 수행하는 명령

  ex) 0*/6**1-5 root echo "How are you!" |mail -s "Hi" qeqwr0304@naver.com
  월요일부터 금요일까지 0 6 12 18시 정각에 메일 보냄

 crontab 명령
 - 일반 사용자가 자신의 cron작업을, 자신의 crontab 파일에 등록할 때 사용해야 하는 명령
 - crontab [option]
 - 옵션
 - 지정된 시간에 일회성으로 작업을 예약하려면 at명령을 사용함