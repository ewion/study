학습개요
셸은 명령 행 인터페이스를 제공한다. 셸 명령의 기본 사용법과 온라인 매뉴얼의 활용법을 살펴본다. 셸이 제공하는 강력한 기능으로 파이프, 입출력 리다이렉션, 명령 치환, 수식과 변수의 확장 및 환경 변수와 환경 설정 파일 등을 학습한다.

학습목표
셸 명령의 기본 사용법을 익히고 온라인 매뉴얼 기능을 활용할 수 있다.
히스토리 기능과 명령 행 자동 완성 기능을 사용할 수 있다.
셸의 특수 문자, 명령 치환, 수식과 변수의 확장에 관해 설명할 수 있다.
셸의 환경 설정 파일을 나열하고 설명할 수 있다.

정리
셸 명령의 종류로 에일리어스, 셸 예약어, 함수, 내장 명령, 일반 명령 등이 있다.
히스토리 기능을 사용하여 이전 명령을 불러오거나 실행할 수 있다.
파이프는 왼쪽 명령의 결과를 오른쪽 명령의 입력으로 연결시킨다.
입출력 리다이렉션은 셸 명령의 표준 입력 또는 표준 출력이 필요할 때 대신 파일을 사용하는 기능이다.
셸 명령을 수행하기 전에 명령 치환, 변수나 수식의 확장 등이 먼저 처리된다.

1. 셸 개요
 셸
 - 명령어 해석기 또는 명령 행 인터페이스
 - 셸멍령을 프로그램으로 작성하여 처리할 수 있음
 - 텍스트 모드로 로그인 하면 기본 셸이 주어짐

 셸 사용하기
 - 텍스트 모드에서 로그인하면 자동으로 로그인 셸이 실행
 - GNOME데스크톱에서는 터미널 창을 실행시켜 셸사용
 - 기본적으로 한개의 명령을 입력하고 엔터누러 명령 수행

 셸의 종류
 - 많은 리눅스 배포판에서는 Bash를 기본 셸로 사용
 - 셸 종류에 따라 에일리어스설정, 초기화파일, 셸스크립트 사용법, 명령행 완성기능, 명령행 편집기능 등에 차이가 있음

 Bash 셸
 - 실행명령은 /bin/bash

 셸 선택하기
 - 기본 셸 선택 가능
  chsh -s/bin/sh
 - 터미널 창을 대화형 셸이라고도 함
 - 로그인 셸과 비로그인셸 구별 가능해야함
   cnt + alt + f1~ f6으로 가상콘솔 사용 가능 여러명의 다중 사용자처럼 사용 가능

2. 셸 명령
 셸 명령의 형식
 - $ 명령어 옵션 인수
 - 대개 명령어는 프로그램의 이름
 - 관리자 명령 또는 일반사용자 명령있음
 - 가장 간단한 형태의 실행은 명령의 이름만 사용하는 것

 chsh 명령
 - 기본 셸을 바꾸는 명령
 - chsh[option][username]

 옵션과 인수

 명령어의 종류
 - 에일리어스 alias 명령을 사용하여 만든 명령의 별칭
 - 셸 예약어 예약된 단어로 do, while, case등
 - 함수 셸에서 수행되는 함수의 정의
 - 내장 명령 셸 내부에 존재하는 명령으로 cd, echo, pwd등
 - 일반 명령 실행파일이 존재하는 명령
 - 환경변수 PATH에 설정된 경로중 실행 파일이 존재하면 명령의 이름만으로 실행 가능

 alias 명령
 - 자주 사용하는 명령의 단축명령 생성
  alias
  alias la='ls -A'
  alias rm='rm -i'
 - 계속 사용하려면 셸의 환경설정 파일에 기록해야함

 type 명령
 - 명령이 어떻게 해석되는지 알려주는 명령
  type cd, type -a ls

 which 명령
 - 실행 프로그램을 환경변수 PATH를 기초로 찾아 경로 출력
  which rm

 man 명령
 - 메뉴얼 페이지 보여주는 명령
 - 명령어 사용법이나 설정파일등에 관한 온라인 도움말 제공
 - man passwd 또는 man 5 passwd
 - 명령어의 간단한 도움말 보려면 명령 --help사용 가능

3. 명령 히스토리
 history 명령
  이전에 수행했던 명령 행의 목록 불러옴
 히스토리 기능 이용하여 명령 실행하는 법
 - 이전에 수행했던 명령을 이용하여 명령 수행 가능
 - 다음을 입력하고 실행
  !! 엔터 직전 명령 실행
  !n 엔터 히스토리 목록에서 해당 명령 실행
  !string 엔터 지정된 문자열로 시작하는 최근명령 실행
  위 또는 아래 화살표 누를 때마다 직전 또는 직후 명령 불러옴. 편집 가능

 명령 행 완성 기능
 - 일부만 입력하고 나머지를 자동으로 완성하는 기능
 - 처음 몇 자만 입력 후 tab 왼화살, 오른화살 키를 누르면 실행
 - 정보가 충분하지 않은 경우 모든 가능한 경우를 보여주고 원래 명령 행 유지됨

4. 명령의 연결과 확장

 셸에서 특별한 의미를 가지는 문자
 - 백슬러시 \ : 특문의 기능을 제거하는 이스케이프 문자 또는 긴 명령 행을 분리 시 사용
 - 틸드 ~ : ~ 또는 ~username은 사용자의 홈 디렉터리 의미
 - 도트 . : 현재 작업 디렉터리 표시 또는 명령행의 맨 앞에서 셸스크립트를 실행하는 source명령
 - 더블도트 .. : 현재 디렉터리의 부모 디렉터리
 - 파운드 # : # 문자 뒤에 나타나는 문자를 주석으로 처리
 - 달러 $ : $변수 는 변수값 추출
 - 앰퍼샌드 & : 명령& 명령을 백그라운드로 실행
 - 애스터리스크 * : 파일 이름에서 사용 할 때 0개 이상의 임의 문자열과 대응됨
 - 물음표 ? : 파일 이름에서 사용 할 때 1개 이상의 임의 문자열과 대응됨
 - 파이프 | : 앞 명령의 출력을 다음 명령의 입력으로 연결
 - < 또는 > : 입출력 리다이렉션에서, 즉 파일로부터 입력받을 때 또는 파일로 출력할 때 사용
 - >> : 표준 출력을 파일의 끝에 덧붙일 때 사용
 - 느낌표 ! : 명령 히스토리 기능 이용할 때 사용

 파이프

 입출력 리다이렉션

 명령 치환
 - 명령을 수행할 때 명령의 인수로서 다른 명령 결과 사용
 - $(command) 또는 'command' <- 역따옴표 수행

 인용 부호
 - 빈칸을 포함하는 문자열을 1개의 인수로 사용 할 때 인용, 부호 필요
 - 작은 따옴표는 특문의 의미를 제거함
 - 큰따옴표는 $, '', \, !를 해석하여 확장
 - 백슬래시\ 는 $,',",\ 앞에서 특문의 의미 제거

 수식과 변수의 확장
 - 명령 수행 전에 수식의 결과를 계산하여 전달
 - $[수식] 또는 $((수식))
 - 명령 수행 전 변수값을 추출하여 전달
 - $변수

5. 셸 변수

 셸 변수와 환경변수
 - 변수는 특정 데이터 또는 환경설정을 위한 값을 저장
 - 셸 변수(지역변수)
 - 환경변수(전역변수)
  서브 셸로도 전달
  보통 대문자 사용
  터미널 창을 열어 셸시작하면 이미 많은 환경변수 설정되어있음
  printenv 시스템의 모든 환경변수 이름 값 출력
  export -p 현재 셸의 모든환경변수 출력
 - 변수 설정과 환경 변수로 만드는 방법
  변수=값; export 변수
  또는 export 변수=변수
 - 특정 환경 변수의 값을 확인하는 방법
  printenv 변수
  echo$ 변수는 모든 변수 값을 확인할 수 있음

 자주 사용되는 환경변수
 - HISTSIZE 1개 셸에서 저장되는 명령 히스토리 목록 최대 개수, 기본값 1000
 - HOME 홈 디렉터리
 - MAIL 사용자 메일박스에 해당하는 파일
 - PATH 명령 수행할 때 실행 파일 찾기위한 디렉터리 목록
 - PS1 셸 프롬프트 표시하기 위한 문자열
 - SHELL 사용중인 기본 셸
 - PWD 현재 작업 디렉터리
 - USER 현재 사용자 계정

 로그인과 셸 환경 설정 파일
 - 로그인할 때 또는 셸 시작할 때 자동 실행되는 명령을 저장한 파일
  /etc/profile 모든 사용자 적용, 로그인 할 때 가장 먼저 수행
  ~/.bash_profile 로그인할때 수행, 개별 사용자 적용
  ~/.bashrc 셸 지작할 때마다 수행, 개별 사용자 적용
  /etc/bashrc 모든 사용자에게 적용, 셸 시작할 때마다 수행
  ~/.bash_logout 로그아웃을 수행할 때 실행되는 스크립트 파일