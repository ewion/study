학습개요
JSTL은 활용 빈도가 높은 커스텀 태그들을 모아 표준화시킨 것이다.
JSTL은 변수 처리, 흐름 제어, URL 처리 등을 지원하는 코어 태그 라이브러리, XML, 국제화, 데이터베이스 처리 및 일반 함수 라이브러리 등 다섯 가지 태그 라이브러리로 분류된다.

학습목표
커스텀 태그의 용도를 설명할 수 있다.
코어 태그 라이브러리를 사용할 수 있다.
표현 언어 수식에서 JSTL의 함수를 사용할 수 있다.

정리하기
사용자가 직접 만들어 사용하는 태그를 사용자 정의 태그 또는 커스텀 태그라고 한다.
JSTL은 자주 사용되는 커스텀 태그들을 모아서 표준화 시킨 것이다.
JSTL은 코어, XML, 국제화, 데이터베이스 및 함수의 다섯 가지 태그 라이브러리를 제공하며 접두어는 순서대로 c, x, fmt, sql, fn이다.
코어 라이브러리는 변수 사용이나 흐름 제어 및 URL 처리를 지원하는 태그들을 제공한다.
URL 처리와 관련된 태그에는 , , 태그 등이 있다.
JSTL은 표현 언어 수식에서 사용할 수 있는 함수 라이브러리를 제공한다.

1. 커스텀 태그
 액션 태그
 - JSP에서 제공되는 표준 액션
 - JSP페이지의 실행 중에 특별한 액션 수행
 - <jsp:tagName> 으로 시작하는 태그, XML 문법을 따름

 사용자 정의 태그와 태그 라이브러리
 CSTL (사용자 정의 태그)
 - 사용자가 정의하는 태그로 커스텀 액션 태그라고 함, 태그 핸들러 클래스, TLD파일이 필요
 - 회사나 개인이 태그 라이브러리 개발 가능
 - 태그 라이브러리란 커스텀 태그들의 집합

 JSTL
 - 표준화된 커스텀 태그들의 집합
 - 많은 JSP 응용에서 자주 사용되는 커스텀 태그들을 모은 것
 - JSTL에서 정의한 태그를 사용하려면 이것을 구현한 자바 클래스들을 가지고 있어야 함

 태그의 형태
 - 액션 태그와 커스텀 태그는 모두 XML 태그임
 - 시작 태그와 종료 태그를 가짐
 - 속성의 값은 따옴표 사용
 - 태그 이름의 충돌을 피하기 위해 접두어(prefix)사용

2. JSP 표준 태그 라이브러리 JSTL
 JSTL의 분류
 - 코어
  지원 기능 : 변수, URL, 흐름제어
  접두어 : c
  URI : http://java.sun.com/jsp/jstl/core
 - XML
  지원 기능 : xml 관련 처리
  접두어 : x
  URI : http://java.sun.com/jsp/jstl/xml
 - 국제화
  지원 기능 : 메시지 형식, 숫자 및 날짜 형식
  접두어 : fmt
  URI : http://java.sun.com/jsp/jstl/fmt
 - 데이터베이스
  지원 기능 : SQL
  접두어 : sql
  URI : http://java.sun.com/jsp/jstl/sql
 - 함수
  지원 기능 : 컬렉션, String 처리
  접두어 : fn
  URI : http://java.sun.com/jsp/jstl/fn

 JSTL 태그 라이브러리 설치
 - 톰캣설치폴더 webapps examples WEB-INF lib 폴더에
   ~ impl, spec jar 파일이 있음
   또는 톰캣 홈페이지에서 구한 다음 해당 파일을
   이클립스 작업공간 > 동적 웹프로젝트 폴더 > src > main > webapp > WEB-INF > lib 폴더 내에 저장

 JSP 페이지에서 JSTL 코어 라이브러리 사용하기
 - taglib 지시어를 사용
 - jsp 페이지 상단에 선언
  <%@ taglib preix="c" uri="http://java.sun.com/jsp/jstl/core">

3. 코어 태그 라이브러리
 JSTL 코어 태그 라이브러리
 - 변수 처리
  set 사용될 변수 설정
  remove 설정된 변수 제거

 - 흐름 제어
  if 조건에 따라 내부코드 수행
  choose 다중 조건 처리할 때 사용
  forEach foreach구문과 같은 기능 수행
  forTokens 구분자로 분리하여 문자열 처리할때 사용

 - URL 처리
  import  URL이 지정하는 자원 삽입
  redirect 지정된 URL로 이동
  url URL 재작성

 - 기타
  catch 예외 처리
  out 출력

 변수 처리
 <c:set> 태그 var버전
  ex) <c:set var="변수명 value="변수값" [scope="영역"]></c:set>
 - 영역에 포함되는 속성에 값을 지정, 태그 속성 var에 속성의 이름 지정
 - 영역에 해당 이름의 속성이 존재하지 않는다면 생성
 - scope가 생략되면 기본 값은 page
 - 변수의 값은 임의의 객체가 될 수 있음
 - 값을 지정할 때, value속성 대신 <c:set>태그의 몸체에 넣어도 마찬가지

 <c:set> 태그 target버전
  ex) <c:set target="대상" property="속성이름" value="값"></c:set>
 - Map 의 원소 또는 자바빈 객체의 속성에 값을 지정
 - <jsp:setProperty>태그와 유사
 - target 속성을 사용하여 "대상(속성이 바뀔 객체)" 를 지정할 때, 표현식이나 표현 언어 사용
 - 이름을 표현하는 문자열 쓰면 안됨
 - target이 자바빈 객체이면 "속성이름" 은 객체가 가지는 속성
 - target이 Map 이면 "속성이름" 은 맵에 존재하는 한 원소의 키
  ex)
  <% Member member = new Member(); %>
  <c:set target="<%member%>" property="name" value="Jimmy"/>
  <c:set var="m" value="<%member%>"/>
  <c:set target="${m}" property="name" value="Jimmy" />

 ${변수명} 과 ${변수명}
 - <c:set> 태그의 value속성에서 변수값을 지정할 때 사용
 - ${ } 는 즉시 값을 계산하여 변수에 저장
 - #{ } 는 변수가 사용될 때 값을 계산

 <c:remove> 태그
 ex) <c:remove var="변수명" [scope="영역"] />
 - <c:set>으로 설정된 변수 삭제
 - scope속성을 지정하지 않으면 모든 영역에서 삭제

 흐름 제어 태그
 <c:if> 태그
 ex) <c:if test="조건" ... </c:if>
 - 속성 test에 지정된 "조건"을 평가하여 결과가 true이면 몸체 실행
 - "조건" 지정할 때 표현식도 가능하나 주로 표현언어 수식을 사용
 - if-else 구문 지원X

 <c:forEach> 태그
 ex)
  <c:forEach var="i" begin="1" end="10" step="1">
   <c:set var='s' value="${s+i}"/>
  </c:forEach>
  s값 : ${s}
 - java 언어의 반복구조인 for, while, foreach문에 대응됨

 <c:forEach>태그의 속성과 용도
 - items 반복처리할 항목을 가진 배열이나 컬렉션
 - begin 반복문 시작을 나타내는 값 지정
 - step 반복문 끝을 나타내는 값을 지정
 - var begin에서 시작해서 얼마씩 증가할지 지정
 - varStatus 현재 항목을 가지고 있는 변수명
   first 현재 실행이 첫번째 반복인 경우 true
   last  현재 실행이 마지막 반복 경우 true
   current 현재 실행에서 사용되는 항목
   index 현재 실행에서의 배열 첨자 값
   count 현재 실행이 몇 번째 반복인지 나타내는 수

 <c:forEach>태그 - item속성
 - 배열 Collection Map에 저장된 원소를 순차적으로 처리할 때 사용
 - items 속성의 값으로 집합체를 명시하면, 원소가 차례로 var에 지정된 변수에 대입, items속성을 지정할 때 표현언어나 표현식 사용
 ex)
  <c:forEach var="i" items="${requestScope}">
   ${i.key} = ${i.value}
  </c:forEach>

 <c:forEach>태그 - varStatus 속성
 - items 속성에 배열이 지정되면 begin과 end의 값은 첨자를 의미
 - varStatus 속성에 지정된 "변수"를 이용하면 현재 원소값(변수.current), 첨자(변수.index), 반복회수(변수.count)를 알 수 있음

 URL 처리 태그
 <c:import> 태그
 ex) <c:import url="URL" [var="변수"] [scope="영역"] [charEncoding]></c:import>
 - <jsp:include>와 유사
 - url에 지정된 페이지의 실행결과를 태그가 있는 위치에 포함시키거나 var에 지정된 변수에 저장
 - var 속성이 없으면 화면에 출력
 - 지정된 변수는 영역의 속성이 되며 문자열을 저장함
 - 같은 웹 애플리케이션이 아닌 외부페이지 지정 가능

 <c:url> 태그
 ex)
  <c:url value="URL" [var="변수"] [scope="영역"]>
   <c:param name="이름" value="값 />
  </c:url>
 - value속성에 지정한 URL을 표시하는 문자열로 변환하여 var속성에 지정된 변수에 저장하는 태그, var속성이 없으면 화면에 출력
 - <c:param>태그를 사용하여 파라미터 포함 가능
 - value값에 한글 사용되는 경우, 공백 포함 시 자동으로 인코딩

 기타 태그
 <c:out> 태그
 - 속성 value에 지정된 문자열 출력
  표현식이나 표현언어를 사용하여 출력하는 것과 유사하나 아래와 같은 특문이 있을 때 달라짐
 - escapeXml속성이 true(기본값)이면 특수문자 변환
  특문 <, >, &, ', ", 를 &lt;, &gt;, &amp;, &#039, &#033 으로 변환함
  즉 특문을 해석하지 않고 원래 문자열 그대로 브라우저에 출력
 - value에 null이 지정될 경우를 대비하여 속성 default에 기본값 줄 수 있음

 <c:catch> 태그
 ex)
  <c:catch var="변수">
    예외 발생 가능성 있는 코드
  </c:catch>
 - 예외 처리에 사용됨
 - 스크립트 실행중 예외 발생시 var 속성에 지정된 변수에 Exception 객체를 저장

 표현 언어의 함수
 - JSTL은 표현 언어에서 사용할 수 있는 함수를 제공
 - 대부분은 문자열 처리를 위한 함수임, 자바의 String 클래스가 제공하는 메소드와 유사

