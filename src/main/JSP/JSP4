JSP동작원리

1. JSP 처리 과정
 클라이언트가 JSP페이지를 요청하면 웹컨테이너가 다음을 수행함
 JSP 라이프 사이클
 JSP페이지의 최초 요청을 처리할 때
 JSP페이지(.jsp)를 서블릿 자바 프로그램(.java)으로 변환
 서블릿 자바 프로그램(.java)를 컴파일하여 서블릿 클래스 파일(.class)생성
 서블릿(.class)를 실행하여 클라이언트 요청을 처리
 이후 요청 처리시 JSP페이지에 상응하는 서블릿이 존재하면 변환과 컴파일을 하지 않음
 단 JSP페이지가 수정되면 다시 변환/컴파일 작업 수행

 클라이언트 요청 -> JSP -변환-> 서블릿 소스 -컴파일-> 서블릿(.class) -> 응답

2. 출력 버퍼와 응답
 출력 버퍼의 사용
  출력 버퍼는 응답결과의 임시 저장소
  응답을 만들 때 먼저 출력 버퍼에 기록함
  - Page 지시어의 buffer속성이 none이 아니어야함
  기록이 끝나면 버퍼의 내용을 클라이언트에 전달
  종료 전에 버퍼가 차면 버퍼를 비우고 전달함
  - Page지시어의 autoFlush속성이 true어야 함
  - 만약 autoFlush속성이 false이면 예외발생

 버퍼를 사용하는 이유
  데이터 전송효율 향상 전송횟수가 줄어들기 때문
  실행 도중에 버퍼를 비우고 새로운 내용을 넣을수 있음 아직 클라이언트에 가기 전이기 때문
  - 예를 들어 실행도중에 에러가 발생 할 경우 다른 내용으로 바꿈
  아직 전송 전이면 버퍼에 있는 헤더의 내용도 변경 할 수 있음
  - 헤더 정보는 응답 몸체를 전송하기 전에 먼저 전송됨

 page 지시어에서 버퍼 설정하기
  buffer속성
   버퍼를 사용하는 경우 크기를 지정함
   기본 값은 8kb
   <%@ page buffer="8kb" %>
   버퍼를 사용하지 않는 경우 다음과 같이 지정함
   <%@ page buffer="none" %>

  버퍼를 사용하지 않는 경우의 제한
   <jsp:forward>기능을 사용 X
   - 포워딩 전에 이미 응답결과가 전송되었다면 오류가 생기기 때문
   오류 페이지 속성을 사용하는 경우에도 버퍼링 필요
   출력된 결과 변경 불가
   - 즉시 전송되므로 도중에 오류가 생기면 이전 결과와 오류정보가 섞임

  autoFlush속성
   true인 경우 버퍼가 차면 버퍼를 비워 전송하고 작업계속
   false인경우 버퍼가 차면 예외 발생

3.서블릿 프로그래밍
3-1.서블릿
 JSP와 서블릿
   JSP기술은 서블릿 기술에 기초함
   JSP페이지는 자바 서블릿프로그램으로 변환되어 처리됨
   Tomcat은 JSP와 서블릿규약을 구현한 서블릿컨테이너/JSP컨테이너

 이클립스로 서블릿 클래스 만들기
  프로젝트이름에서 오른마우스클릭후 New - Servlet
  클래스이름 입력
  자동으로 만들어지는 서블릿 클래스는 생성자 doGet(), doPost()가지고 있음
  실제 서블릿 생성하면 생성자, init(), service(), doGet() 또는 doPost()순으로 실행됨

 doGet()
  서버가 서블릿을 통해 GET요청을 처리하기 위해 호출하는 메소드
   단순한 질의 검색에 사용
  실제로는 서블릿 클래스에서 service()메소드에 의해 호출됨
  기능
  - 요청 데이터 읽기
  - 응답 헤더 작성
  - response.getWriter()를 이용하여 출력 스트림 만들기
  - 출력 스트림을 이용하여 응답 데이터 작성

 doPost()
  서버가 서블릿을 통해 POST요청을 처리하기 위해 호출하는 메소드
   POST방식은 클라이언트가 웹서버에 많은 데이터를 보낼 때 사용
   <form>태그의 method속성을 'POST'로 지정하여 요청하는 경우
   기능
   - doGet()의 경우와 같음