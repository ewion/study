학습개요
셸은 명령어 해석기이며 스크립트 언어이다.
일련의 셸 명령이나 함수의 조합을 프로그램의 제어 구조를 사용하여 셸 스크립트 파일로 작성해 두면 편리하게 사용할 때가 있다.
본 강의에서는 셸 스크립트의 기본 작성법을 알아보고 변수와 함수의 사용법과 예제를 학습한다.

학습목표
셸 스크립트 파일의 실행 방법을 설명할 수 있다.
셸 스크립트에서 변수를 사용할 수 있다
셸 스크립트에서 함수를 정의하고 호출하여 사용할 수 있다

정리하기
셸 스크립트 파일은 셸 명령어의 집합이며 하나의 명령어처럼 실행될 수 있다.
셸 스크립트에서 정보를 저장하기 위해 변수를 사용할 수 있다.
변수의 값을 키보드로부터 입력받고자 할 때 셸 내장 명령인 read 명령을 사용한다.
셸 스크립트에서 명령 행 인수와 관련이 있는 특별한 매개변수가 제공된다.
셸에 함수가 정의되어 있으면 함수를 명령어처럼 사용할 수 있다.

1. 셸 스크립트 개요
 셸
 - 명령어 해석기
  사용자에게 인터페이스를 제공
  셸은 명령어에 상응하는 프로그램을 실행시키고, 완료 후 결과를 스크린에 보여줌
 - 스크립트 언어, 프로그래밍 언어
  함수, 변수 등의 프로그래밍 요소를 사용 가능
  반복문, 조건문 등의 제어 구조를 사용 가능
  셸은 셸 스크립트 프로그램에 있는 명령 행을 제어 구조에 따라 해석하고 실행
  파일(셸스크립트)에 명령을 저장하여 자동, 반복적으로 가능

 셸의 종류
 - Bash, Csh.Tcsh, Ksh, Zsh, Fish
 - 텍스트 모드 또는 GUI환경에서 터미널을 띄우고 셸 명령을 실행함

 셸 스크립트
 - 셸 명령어의 집합으로 이루어진 텍스트 파일
  셸이 스크립트 파일의 내용을 읽어 처리함
  선택/반복등의 프로그래밍 구조 사용 가능
  셸에서 사용할 수 있는 모든 기능을 포함할 수 있음
  긴 작업, 반복적으로 일어나는 작업을 셸 스크립트로 작성할 수 있음
  셸 스크립트를 새로운 하나의 명령어처럼 사용 할 수 있음
 - 예
  /etc/profie, /etc/bashrc, ~/.bash_profile, ~/.bashrc 등의 셸 초기화 스크립트
 - 복습할 내용
  표 3-3 명령의 종류, 알리아스인지 확인
  표 3-7 셸에서 사용하는 특문
  표 3-8 파이프와 입출력 리다이렉션
  표 3-9 자주 사용되는 일반적 환경 변수
  3.4절의 명령 치환 수식과 변수의확장
  man bash를 사용하여 메뉴얼 페이지 참고

 셸 스크립트의 실행 방법
 - bash script_file
  bash 명령을 사용하며, 스크립트 파일에 실행 권한을 추가할 필요 없음
  명령 행에서 script_file 다음에 인수를 추가할 수 있음(모든 방법이 마찬가지)
  서브 셸을 새로 생성하여 스크립트를 실행
 - ./script_file
  스크립트 파일의 이름을 명령어처럼 사용하는 방법
  스크립트 파일에 실행 권한 추가해야함
  PATH 환경변수에 설정된 디렉터리에서 스크립트 파일 찾음
  스크립트 파일의 첫 행에서 #! 다음에 해석기(/bin/bash)를 지정함
  서브 셸을 새로 생성하여 스크립트 실행
 - source script_file 또는 . script_file
  source는 셸의 내장 명령이며 현재 사용 중인 셸 환경에서 스크립트 파일을 실행함
  source 명령 대신에 도트(.) 명령을 사용할 수 있음

 셸 스크립트 문법
 - # 이후 같은 행에서 나오는 내용은 주석처리
 - $0 : 스크립트 파일의 이름으로 확장
  source명령으로 실행하는 경우 셸의 이름(bash)로 확장됨
 - $1 : 첫번째 인수, $2 : 두번째 인수로 확장
 - 스크립트가 복잡하면 중간중간에 적절한 echo명령을 넣는것이 좋음
 - 변수=값 을 사용하여 변수에 값을 지정하고 $변수를 사용하여 값 추출 가능
  등호 좌우에 공백X

2. 변수 사용
 셸 스크립트에서 변수 사용
 - 선언 없이 변수 사용 가능
  변수에 값을 지정하는 방법은 변수이름=값 (공백X)
  변수 확장 $변수는 변수값 추출
 - 변수 값은 기본적으로 문자열로 취급
  연산이 필요하고 변환이 가능한 경우 정수로 다루어짐
 - 변수의 이름 작명
  대소문자의 구별
  영문자, 숫자, 언더스코어(_)문자로 구성
  첫 자는 숫자가 될 수 없음

 명령 행 인수
 - 셸이 스크립트를 처리할 때 사용되는 인수
 - $0은 스크립트 파일의 이름으로 확장됨
 - 나머지를 위치 매개변수라 하며 $1, $2, $3 등은 이러한 인수를 의미함

 특별한 매개 변수
 - 명령 행 인수와 관계가 있는 특별한 변수
 - 변수 값만 참조 가능
  $*
  $@
  $$ 셸의 프로세스 ID로 확장(PID)
  $#
  $?
  $!

 read 명령
 - 키보드로부터 한 라인을 읽은 후 개별 단어를 상응하는 변수에 저장함
  대화식으로 스크립트 실행 가능
 - read [options] [variable...]
  첫 번째 변수에 첫번째 단어를, 두 번째 변수에 두번째 단어 저장
  변수 개수가 적으면 마지막 변수에 나머지 모두를 저장
  변수 이름을 사용하지 않으면 셸 변수 REPLY 에 저장
  옵션 -p prompt 는 입력을 위한 프롬프트를 지정

3. 함수 사용
 함수
 - 함수는 셸 스크립트에서 반복적으로 사용되는 명령의묶음
 - 셸 스크립트에서 함수 정의 가능
  정의되어 있는 함수를 호출하여 사용함
 - 셸에서 함수를 호출하면 호출한 셸 내에서 실행됨

 함수의 사용 방법
 - 함수가 정의된 셸 스크립트 내에서 함수를 호출하여 사용할 수 있음
 - source명령이나 도트(.) 명령으로 함수가 정의된 셸 스크립트를 실행하면 셸 환경에 함수 정의가 추가됨. 그러면 같은 셸에서 함수 이름을 셸명령어처럼 사용
  set명령으로 함수 정의 확인 nuset name으로 삭제 가능
  함수가 정의되어 있으면 함수를 셸 명령어처럼 사용 가능

 함수 정의 방법
 - function name{   name() {
    command... 또는 command...
    return      return
 } }
 - return 또는 return n 문은 함수를 종료하는 문장으로 종료 상탯값을 리턴할 수 있음(n이 생략되면 직전 명령의 종료 상탯값을 리턴)
 - 함수 정의를 항상 사용하려면 .bashrc에 넣는 것이 좋음
  알리아스 설정도 마찬가지
  셸이 시작할 때 항상 .~/.bashrc 가 실행되기 때문