학습개요
마지막 커밋 이후 수행했던 작업을 임시 저장하였다가 복원하는 스태쉬 기능에 관해 학습한다.
불가피하게 커밋 이력에서 과거의 특정 버전으로 완전히 되돌리는 리셋 기능을 살펴보고,
기존 커밋 이력을 유지한 채 취소 작업을 수행하는 리버트 기능도 학습한다.

학습목표
작업 내용의 임시 저장을 위해 스태시 기능을 사용할 수 있다.
스태시에 저장된 항목을 사용해 이전 작업 내용을 복원할 수 있다.
리셋 기능을 사용하여 버전 되돌리기를 수행할 수 있다.
리셋과 리버트 기능의 차이를 비교하여 설명할 수 있다.

정리하기
마지막 커밋 이후 수행된 작업 영역과 스테이지 영역에서의 변경 작업을 git stash 명령으로 임시 저장할 수 있다.
스태시에 저장된 항목을 이용하여 복원할 때 git stash apply 명령을 사용한다.
리셋 기능은 지정한 과거의 커밋으로 완전히 회귀하는 것으로 삭제되는 커밋이 생긴다.
체크아웃은 이전 커밋 또는 다른 브랜치로 HEAD를 이동하는 것으로 작업 폴더가 깨끗한 상태라야 실행할 수 있다.
작업 폴더를 깨끗하게 만들기 위해 git stash 또는 git reset 기능을 사용할 수 있다.
리버트 기능은 리셋과 유사하나 기존 커밋을 삭제하지 않고, 취소를 의미하는 커밋을 추가하는 방식이다.
git revert 명령은 작업 폴더가 깨끗한 상태에서만 수행 가능하며 충돌이 발생할 수 있다.

1. 스태시의 개요
 스태시
 - 마지막 커밋 이후 변경된 작업 영역과 스테이지 영역을 임시 저장하는 기능
  급하게 작업 브랜치를 바꿔야 할 때 사용
  git checkout or git switch 명령은 작업 폴더가 깨끗한 상태에서 수행 가능
  git stash 명령을 사용하여 마지막 커밋 이후 작업 영역에서 수정함 상태의 파일과 스테이지에 올라옴 상태의 파일을 스택 구조의 임시 저장소(스태시)에 저장함
 - 스태시 실행 후 작업 영역과 스테이지 영역은 마지막 커밋과 동일한 깨끗한 상태가 됨
  추적되지 않는 파일 저장하려면 --include-untracked(또는 -u) 사용
  커밋 이력이 없거나 마지막 커밋 이후 작업한 것이 없으면 스태시 수행 불가

 git stash 저장 명령
 명령                                    설명
 git stash [-m message]                 현재의 작업 영역과 스테이지 영역의 상태를
 git stash push [-m message]            스태시에 보관한다.
 git stash [message]                    필요하다면 설명 메시지를 붙일 수 있다
 git stash (-u|--include-untracked)     작업 영역에서 추적되지 않는 파일도 함께 저장
 git stash (--keep-index|-k)            스테이지 영역을 유지하고 스태시에는 저장하지 않는 방식
 git stash save (--keep-index|-k)       =

 git stash 목록 확인과 비교 명령
 명령                                   설명
 git stash list                         스태시에 저장된 항목의 목록 보기
 git stash show [stash@{n}]             git stash 수행 시 최종 커밋과 스태시에 저장된 항목을 비교해 보여준다. 명시한 스태시가 없으면 최신 저장 항목과 비교

 작업 영역의 복원
 - 스태시의 저장 목록에서 특정 항목을 불러와 작업 영역에 적용하여 복원
  명령은 git stash apply
  항목을 지정하지 않으면 stash@{0} 이 적용
  기본적으로 작업 영역만 복원되며 스테이지 영역까지 복원하려면 --index 옵션 사용
  적용 후에도 지정 항목은 스태시에서 삭제되지 않고 그대로 유지

 스태시 항목의 삭제 명령
 명령                         설명
 git stash drop [stash@{n}]  스태시 목록에서 지정 항목을 삭제하고 명시한 스태시가 없으면 가장 최근 항목 삭제
 git stash clear             스태시에 저장된 항목을 모두 삭제한다
 git stash pop [stash@{n}]   지정한 스태시 항목을 적용하고 스태시 목록에서 제거한다

2. 스태시의 활용
 브랜치의 생성과 스태시 적용
 - 기준 커밋에서 시작하는 새로운 브랜치를 만들고 스태시를 적용(작업 영역 복원)
  git stash branch branchName [stash@{n}]
  지정한 스태시 항목의 기준 커밋에서 시작하는 새로운 브랜치를 만들고 이동한 후 지정한 스태시를 적용하고 스태시 목록에서 제거

 스태시 항목의 제거
 - git stash drop
 - git stash clear

 추적되지 않는 파일의 삭제
 - 적당한 옵션과 함께 git clean 사용

3. 리셋
 개요
 - HEAD의 위치를 이전 특정 커밋으로 되돌리는 기능
 - 버전을 완전히 과거로 되돌리는 것
  해당 커밋이후의 커밋 이력은 삭제됨
  새로운 커밋은 생성되지 않음
 - 세 가지 모드로 --hard, --mixed, --soft 옵션이 있음
  git reset --hard commit       지정한 커밋의 내용으로 작업 폴더와 스테이지 영역, 깃 저장소, 커밋 이력을 모두 재설정
  git reset [--mixed] commit    지정한 커밋의 내용으로 깃 저장소(커밋이력)을 되돌리고 스테이지 영역을 바꿈, 작업폴더는 그대로 남음
  git reset --soft commit       지정한 커밋의 내용으로 깃 저장소(커밋이력)만 재설정, 스테이지 영역과 작업 폴더는 그대로 남음

 체크아웃을 통한 시간 이동
 - 체크아웃은 이전 커밋 또는 다른 브랜치로 HEAD를 이동하는 것
 - 체크아웃 하려면 작업 폴더가 깨끗한 상태여야 함
  스태시 수행 필요

4. 리버트
 개요
 - 최근 커밋부터 차례로 이전 커밋을 취소할 때 사용
  리셋(--hard) 옵션과 유사하나 기존 커밋을 삭제하지 않고 커밋 이력을 남겨 둔 채 커밋 취소를 의미하는 새로운 커밋을 생성
  작업 폴더가 깨끗한 상태어야 리버트 수행 가능
  git revert commit [--edit]    지정한 커밋을 취소하고 그 이전 커밋의 내용으로 작업 폴더, 스테이지 영역, 깃 저장소 모두 변경. 커밋 메시지를 수정하도록 편집기가 실행
  git revert commit --no-edit   편집기 실행 없이 커밋 메시지를 'Revert "주어진 커밋의 메시지"' 로 자동 지정
 - 한번에 한 커밋만 취소하므로 충돌이 발생하지 않으려면 최신 커밋부터 순차적으로 여러 번 취소
 - 충돌 발생 시 아래의 순서대로 해결
  충돌된 파일을 찾아 수정
  수정한 파일을 인덱스에 등록
  git revert --continue 로 명령을 계속 진행시킴

 리버트의 연속 적용
 - 순서대로 리버트를 수행하여 과거의 커밋으로 이동하는 것
 - 아래는 같은 명령
  git revert HEAD HEAD~ HEAD~2
  git revert HEAD~3..HEAD
  git revert HEAD~3..
 명령                                        설명
 git revert commit1 commit2 [--[no]-edit]   취소 가능한 순차적 커밋을 명시하여 취소를 수행하고 만일 명시한 인자의 순차적 취소가 불가능하면 충돌 발생
 git revert commit1 commit2 --no-commit     바로 커밋하지 않고 작업 영역과 스테이지 영역에만 취소를 위한 변경사항 적용. 이후 git revert --continue를 실행해 완료

 리버트의 --no-commit 옵션
 - 작업 영역과 스테이지 영역에 취소에 필요한 변경사항을 적용하고 실제 커밋을 하지는 않음
  git revert --continue 명령으로 리버트 실행을 완료할 수 있음
 - 범위 내의 여러 커밋을 취소할 때 커밋 한 개만 생성할 수 있음

