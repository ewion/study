학습개요
버전 관리 시스템의 필요성을 이해하고 깃을 설치한다.
깃에서 작업 디렉터리, 스테이지, 깃 저장소의 기능을 구분하고, 파일의 상태 변화 과정을 이해한다.
깃의 기본 명령을 학습하며, 깃 저장소의 상태를 확인한 후 3개 저장 공간 사이의 파일을 비교하고, 커밋 이력을 확인한 후 커밋 간 파일 내용을 비교해 본다.

학습목표
버전 관리 시스템의 필요성을 설명할 수 있다.
깃을 설치하고 작업 디렉터리를 깃 저장소로 지정할 수 있다.
작업 디렉터리, 스테이지, 깃 저장소의 기능을 구별할 수 있다.
커밋을 수행하여 버전을 생성할 수 있다.

정리하기
버전 관리란 파일의 변경 이력을 관리하는 기능이다.
git init 명령어를 사용하여 특정 디렉터리를 ‘깃 저장소’로 지정해야 한다.
깃에서 커밋 수행을 통해 버전으로 기록하기 전에, 먼저 작업 영역에 있는 파일의 변경 내용을 스테이지 영역에 등록해야 한다.
작업 디렉터리, 작업 영역, 최근 커밋 사이에서 파일의 변경 작업과 상태 변화를 확인하기 위해 git status 명령을 사용한다.
커밋 이력을 확인하기 위해 git log 명령을 사용한다.
git checkout 명령을 수행하면 HEAD를 과거 커밋이나 다른 브랜치로 이동시킬 수 있다.
3개 저장 공간 사이 또는 커밋 간 파일의 내용을 비교하기 위해 git diff 명령을 사용한다.

1. 버전 관리
 버전 관리
 - 파일의 변경 이력을 관리하는 기느
  과거 어떤 시점의 파일 내용 확인, 파일 상태 복구
  누가 언제 어떤 부분 수정했는지 확인 가능
 - 소프트웨어 프로젝트에서 버전관리는 매우 중요

 버전 관리 소프트웨어
 - 중앙 집중형 : 중앙 서버에만 저장소 존재
  CVS, SVN
 - 분산형 : 로컬 저장도도 존재
  머큐리얼, Bazzar, Git

 분산형 버전 관리 시스템
 - 서버에 존재하는 원격 저장소(서버) 와 개발자 컴퓨터에 저장되는 로컬 저장소(클라이언트)가 존재
  지역 저장소도 완전한 버전 관리 기능을 갖춘 저장소
 - 중앙 서버에 있는 소스를 복사하여 지역 복사본을 만들어 작업
  저장소 간에 파일 동기화 필요할 수 있음
 - 장점
  중앙서버에 문제가 있어도 로컬 저장소 소스로 복구 가능
  병렬 개방 가능
  풀과 푸시 작업에만 인터넷 연결 필요
  대부분의 작업을 지역 저장소에서 할 수 있음
 - 깃허브는 깃 저장소 호스팅 서비스

 중앙집중형 버전 관리 시스템
 - 저장소가 서버에만 존재
  작업 복사본을 받아 작업 후 서버에 커밋해야 저장소에 반영
  커밋이란 변경 사항을 반영하는 것, 또는 변경된 파일 기록하는 것을 의미
 - 시스템 구조가 단순하여 관리가 쉽고 배우기 쉬움
 - 단점
  중앙 서버에 문제 발생시 데이터 손실 가능성
  중앙 서버와 네트워크연결이 필요하므로 작업 속도가 느림

 깃의 특징
 - 변경 사항의 추적, 파일 비교, 작업취소 가능
 - 네트워크 끊겨도 작업이 가능
 - 분산 환경하에서 여러 개발자가 동시작업
 - 여러 브랜치를 통해 다양한 작업 동시 진행
 - 스테이지 영역을 통해 선택적 커밋 가능

2. 깃 사용하기
 깃 설치와 설정
 - 설치
  관리자 권한으로 설치해야 함
  # dnf install git
 - GUI 도구
  https://git-scm.com/download/gui/linux
 - 설정
  시스템 설정 : 시스템 상의 모든 사용자와 모든 저장소에 적용
   설정 파일은  /etc/gitconfig
   git config 명령에서 --system 옵션을 적용
  전역 설정 : 해당 사용자의 모든 저장소에 적용
   설정 파일은 ~/.gitconfig
   git config 명령에서 --global 옵션 사용
  지역 설정 : 현재 지역 저장소에만 적용
   설정 파일은 지역 저장소의 깃 디렉터리에 있는 .git/config

 깃 저장소
 - 특정 작업 디렉터리를 깃 저장소로 지정해야 함
 - git init [directory]
  인자로 지정된 디렉터리 또는 현재 디렉터리를 깃 저장소로 지정하고 초기화 함
  깃 저장소 디렉터리에 서브 디렉터리 .git 이 생성됨
 - git status [--long | --short | -s | --help | -h]
  깃 저장소의 상태 확인 명령
  최근 커밋과 인덱스 사이, 인덱스와 작업 디렉터리 사이에 차이가 있는 파일을 표시하고 추적되지 않는 파일도 표시

 작업 디렉터리, 스테이지 영역, 깃 저장소
 - 작업 디렉터리
  보통의 리눅스 디렉터리로 작업영역, 작업 트리, 작업 폴더, 프로젝트 폴더라고도 함
 - 스테이지 영역
  스테이지, 인덱스 라고도 함
  개별 파일의 변경 내용을 기록하는, 작업 디렉터리와 깃 저장소 사이의 가상 공간
  커밋 수행 전 먼저 변경내용을 스테이지 영역에 기록해야 함
  버전을 만들기 전에 변경사항을 스테이지(또는 인덱스)에 등록해야함
 - 깃 저장소
  버전이 만들어지고 관리되는 가상의 공간
  커밋을 수행하여 특정 시점에서 스테이지의 스냅숏을 저장
  시간 흐름에 따라 여러번 커밋이 수행되면서 커밋 이력이 관리됨
 - 깃에서 파일 상태 변화
  파일을 처음 생성하면 '추적되지 않음(untracked)' 상태가 됨
  git add 명령을 사용하여 스테이지에 올려야 함
  '스테이지에 올라옴(staged)' 상태의 파일은 git commit 명령을 통해 깃 저장소에 스냅샷이 기록됨
  커밋 수행 직후에파일은 '수정전(unmodified)' 상태가 됨
  이 파일을 수정하면 '수정함(modified)' 상태가 됨
  수정된 파일의 변경 내용을 기록하려면 스테이지에 올린 후 커밋 가능

 기본 깃 멍령
 - git add
  git add files        파일을 스테이지 영역에 추가한다
  git add .            현재 디렉터리와 하위 디렉터리에서 모든 파일을 스테이지 영역에 추가한다
  git add (--all | -A) 전체 작업 영역의 모든 파일을 스테이지 영역에 추가한다
 - git commit 커밋 실행
  git commit -m massage 커밋 메시지와 함께 커밋 실행
  git commit -a -m message 인덱스에 등록과 함께 커밋 실행
  git commit -am message
 - git log 커밋 이력 확인하는 명령으로 최신 커밋부터 순서대로 커밋 정보 나열
  git log
  git log --online          현재 브랜치의 커밋 정보를 나열하여 커밋 이력 표시
  git log (--patch | -p)    커밋 정보에 파일 변경 내용 표시
  git log --graph           문자를 연결하여 그래프로 커밋 이력을 그린다
  git log --reverse         오래된 커밋부터 표시 --graph와 함게 사용 불가
  git log --all             모든 브랜치의 커밋 이력 표시
  git log -n                최근 n개의 커밋 이력 표시

 브랜치와 커밋 이력
 - 브랜치란 독립적으로 개발되는 일련의 커밋 목록
 - 브랜치 이름은 브랜치에서 최신 커밋을 가리키는 포인터
 - HEAD는 여러 브랜치 중 현재 작업 중인 브랜치를 가리킴
 - 아래는 main 브랜치의 커밋 이력

 이전 커밋과 다음 커밋 간 파일 내용 차이 확인하기
 - git log 명령에서 옵션 --patch(또는 -p) 사용
  모든 커밋에 대해 커미스이 기본 정보와 이전 커밋과의 차이 표시
 - git show HEAD 또는 git show commit 명령 사용
  HEAD(또는 commit)이 가리키는 커밋의 기본 정보를 표시하고 이전 커밋과의 차이 표시
  옵션 --oneline은 커밋 정보를 한 줄로 표시하여 옵션-s는 커밋 정보만 표시

3. 버전 여행
 체크아웃
 - HEAD를 현재 브랜치의 과거 커밋 또는 다른 브랜치의 최신 커밋으로 이동시키는 것
  git status 명령의 결과에서 작업폴더가 깨끗해야 체크아웃이 가능함
  체크아웃을 통해 과거 커밋으로 이동하면 분리된 HEAD상태가 됨
 - HEAD가 이동되면 상응하는 커밋의 내용으로 작업 영역과 인덱스가 업데이트됨
 - HEAD는 시간이동을 위한 수단
  HEAD~ HEAD^는 직전 커밋을 가리킴
  전전 커밋은 HEAD~~ HEAD~2 HEAD^^ 와 같이 사용
 -
  git checkout HEAD~  HEAD를 직전 커밋으로 이동
  git checkout -      직전 브랜치로 이동
  git checkout branch 주어진 브랜치로 이동

 저장 공간 간 파일 비교
 - git diff는 작업 디렉터리 스테이지 영역 깃 저장소간 파일 내용의 차이 비교
  비교되는 두 파일이 같으면 아무것도 출력하지 않음
  커밋 직후에는 세 저장 공간에 기록된 파일의 내용이 같음

 버전 간 파일 비교
 - 커밋 간 파일내용 비교하는 것
 - git diff commit1 commit2
  commit 1 기준으로 commit2 가 어떻게 변경되었는지 표시



 명령어 목록
 git
    config
    init
    status
    add
    log
    checkout
    diff
