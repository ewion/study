학습개요
브랜치의 생성과 삭제, 브랜치 목록의 확인, 작업 브랜치의 이동에 관한 git 명령어를 학습한다.
가지 브랜치를 만들어 분리 수행되었던 작업은 어느 순간 줄기 브랜치에 병합될 필요가 있다.
fast-forward 병합과 3-way 병합 방법을 구분하고, 병합 시 발생할 수 있는 충돌과 해결 방법에 관해 살펴본다.

학습목표
브랜치 개념을 설명할 수 있다.
깃을 이용하여 브랜치를 생성하고 관리할 수 있다.
fast-forward 병합과 3-way 병합을 구별하여 실행할 수 있다.
3-way 병합에서 발생할 수 있는 충돌 문제를 해결할 수 있다.

정리하기
브랜치란 독립적 작업을 위한 것으로, 기존 코드를 복사하여 새로운 작업을 할 때 필요하다.
병합이란 대상 브랜치에서 작업한 내용을 현재 브랜치에 통합시키는 것이다.
git branch 명령을 사용하여 브랜치의 생성과 삭제, 브랜치 목록의 확인 등을 할 수 있다.
작업 영역이 깨끗해야 작업 브랜치를 이동시킬 수 있으며 git switch 또는 git checkout 명령을 사용한다.
fast-forward 병합이란 HEAD가 위치한 작업 브랜치를 자손 브랜치의 위치로 전진 이동시키는 것으로 새로운 커밋은 발생하지 않는다.
3-way 병합은 같은 조상에서 갈라져 나온 두 브랜치를 병합하는 것으로 병합을 의미하는 새로운 커밋이 자동 생성된다.
3-way 병합에서 충돌이 발생하면 git status 명령으로 충돌이 생긴 파일을 확인하고 직접 수정하여 충돌을 해결한 후 인덱스에 추가하고 커밋한다.

1. 브랜치 개요
 브랜치
 - 어떤 목적을 가진 독립적 개발 흐름
  기본 브랜치 master or main 이 주어짐
  기능 추가 구조개선 버그수정 등을 위해 각각 별도 브랜치를 만들어 동시 작업
  브랜치는 커밋 이력을 가지며 보통 브랜치 이름은 커밋 이력에서 최신 커밋을 가리킴

 브랜치 확인과 생성 명령
 git branch 또는 git branch--list 기존 브랜치 이름 나열
 git branch -v                   기존 브랜치 마다 상세정보 나열
 git branch newBranchName        주어진 인자로 브랜치를 생성하나 HEAD는 이동X
 git switch -c newBranchname     주어진 인자로 브랜치를 생성하고 HEAD를 이동
 git checkout -b newBranchname   주어진 인자로 브랜치를 생성하고 HEAD를 이동

 작업 브랜치의 이동 명령 HEAD의 이동
 git switch branch      주어진 브랜치로 HEAD 이동
 git switch -           -는 직전 브랜치로 HEAD 이동
 git checkout branch    주어진 브랜치로 HEAD 이동
 git checkout -         -는 직전 브랜치로 HEAD 이동
 git checkout commit    주어진 커밋으로 HEAD 이동

 이전 커밋으로의 이동 명령 HEAD의 이동
 git checkout [-d] HEAD~    HEAD가 분리되어 HEAD~ 로 이동
 git switch -d HEAD~        HEAD가 분리되어 HEAD~ 로 이동
 git switch -d [commit]     HEAD가 분리되어 주어진 커밋으로 이동

2. 브랜치 관리
 작업 브랜치와 커밋 이력
 - 작업 브랜치는 여러 브랜치 중 현재 작업 중인 브랜치
 - 브랜치마다 커밋 이력이 다름

 병합 여부 확인 명령
 git branch --merged               현재 작업 브랜치를 기준으로 병합된(도달가능한) 브랜치 목록 표시
 git branch --no-merged            현재 작업 브랜치를 기준으로 병합된(도달불가능한) 브랜치 목록 표시
 git branch --merged branchName    주어진 브랜치 기준으로 아직 병합되지 않은(도달가능한) 브랜치 목록 표시
 git branch --no-merged branchname 주어진 브랜치 기준으로 아직 병합되지 않은(도달불가능한) 브랜치 목록 표시
 브랜치 삭제 명령
 git branch -d branchName 지정한 (이미 병합된) 브랜치 삭제
 git branch -D branchName 지정한 (병합되지 않아도)브랜치 삭제

3. 브랜치 병합
 fast-forward 병합
 - 두 브랜치를 합치는 것, 단순한 병합
 - fast-forward 병합은 자손 브랜치의 커밋 이력이 조상 브랜치의 커밋 이력을 모두 포함하는 경우 가능
 - fast-forward 병합은 조상 브랜치를 자손 브랜치 위치로 이동하는 것
 - git merge childBranch 명령 사용
  병합 후 (HEAD->현재브랜치) 가 자손 브랜치 위치로 이동되며, 현재 작업 영역과는 스테이지 영역도 업데이트 됨

 3way 병합
 - 한 커밋에서 갈라져 나온 두 브랜치를 병합
  어느 시점 이후 대상 커밋의 변경을 현재 브랜치에 병합
  병합을 의미하는 새로운 커밋이 생김(커밋메시지 입력)
  (HEAD->현재브랜치)가 새로운 커밋으로 이동
 - merge 명령
  git merge [-e|--edit] branch  커밋 메시지 편집을 위해 편집기가 열리며 Merge branch 'branch'가 자동 삽입
  git merge -m 'message' branch 병합하면서 새로 생성되는 커밋의 메시지 지정

4. 브랜치 병합 충돌과 해결
 병합 충돌과 해결
 - 충돌
  두 브랜치에서 같은 파일의 같은 위치를 동시에 수정한 경우 자동 3-way병합을 할수 없어서 충돌 발생
  서로 다른 위치를 수정한 경우에만 자동병합가능
 - 해결
  개발자가 편집기로 직접 수정하여 충돌을 해결해야함
 - 주어깆 ㄴ커밋에서 브랜치를 생성하는 git switch 명령
  git switch -c newBranch HEAD~     현재 커밋의 직전 커밋(HEAD~) 에서 새로운 브랜치를 생성하고 HEAD를 이동
  git switch -c newBranch commit    주어진 커밋에서 새로운 브랜치를 생성하고 HEAD 이동

 병합 충돌과 해결 예
 - 충돌이 일어난 파일은 병합하지 않은 경로(unmerged path)로 표시됨
  양쪽에서 수정되었기에 충돌 발생
