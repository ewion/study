학습개요
이번 강의에서는 기억장치의 개념에 대해 살펴보고 주기억장치의 종류와 그 특징에 대해서 학습한다.
연관기억장치의 개념과 동작원리를 살펴보고 캐시기억장치의 개념에 대해 학습한다.

학습목표
지역성의 원리에 대해 이해한다.
기억장치의 계층구조와 성능평가 요인들에 대해 이해한다.
주기억장치의 구조적 개선방법인 복수모듈기억장치에 대해 그 구성과 동작원리를 이해한다.
연관기억장치의 개념과 동작원리를 이해한다.
캐시기억장치에 대한 개념을 이해한다.

주요용어
지역성의 원리 : 주어진 시간 동안에 일반적인 프로그램의 실행에서 발생하는 번지들은 기억장치내의 몇몇 한정된 영역만을 반복적으로 지정하며, 그 밖의 영역에 대한 접근은 상대적으로 드문 현상을 말한다.
시간적 지역성(temporal locality) : 어떤 내용이 한번 참조되면, 곧바로 다시 참조되기 쉬운 특성
공간적 지역성(spatial locality) : 어떤 내용이 참조되면, 그 내용에 가까운 곳에 있는 다른 내용들이 곧바로 참조되기 쉬운 특성
기억장치 계층(memory hierarchy) : 기억장치의 일반적인 구성은 가격과 성능을 절충한 여러 형태의 기억장치가 연결되어 있으며, 속도와 저장용량을 고려하여 여러 층으로 구성한 구조를 말한다.
복수모듈기억장치 : 기억장치모듈을 여러 개 가지고 있는 기억장치
연관기억장치 : 기억장치에 기억되어 있는 데이터의 내용을 이용하여 접근할 수 있는 기억장치
캐시기억장치 : 주기억장치보다 속도가 빠른 기억소자들로 구성되어 중앙처리장치와 주 기억장치간의 속도 차이를 줄여주기 위해 만든 기억장치

1. 기억장치의 개요
 기억장치 : 프로그램과 데이터를 저장하는 장치

 주기억장치
 - 처리에 당장 필요한 프로그램이나 데이터 저장
 - 중앙처리장치와 직접적인 데이터 교환 가능

 보조기억장치
 - 주기억장치의 용량부족으로 인해 저장이 어려운 대량의 자료를 보관하는 장치
 - 중앙처리장치와 직접적인 자료교환이 불가능하며, 주기억장치를 통해서만 가능
 - 주기억장치에 비해 가격이 저렴하고 용량이 크지만, 자료의 전송속도는 느림

 지역성의 원리
 - 주어진 시간 동안 프로그램 실행에서 발생하는 주소들은 기억장치 내의 한정된 영역만을 반복적으로 지정하며, 그 밖의 영역에 대한 접근은 상대적으로 드문 현상
 - 시간적 지역성
  어떤 내용이 한번 참조되면 곧 바로 참조되기 쉽다
 - 공간적 지역성
  어떤 내용이 참초되면, 그 내용 가까이 있는 다른 내용이 참조되기 쉽다

 프로그램의 지역성
 - 반복적으로 명령어와 데이터를 접근하게 되는 루프를 포함하는 대부분의 프로그램은 상당히 큰 시간적 지역성을 보인다
 - 또한 대개의 명령어들이 순차적으로 접근하기 때문에 큰 공간적 지역성을 보인다

 기억장치 계층구조
 - 기억장치 계층
  속도와 크기가 다른 기억장치를 여러 층으로 구성한 것
  지역성의 원리를 이용하여 기억장치 계층 구현
 - 계층구조의 목적
  전체 기억장치 구성에 있어 가격최소화, 빠른 접근속도, 대용량의 크기를 추구
 - 1. 레지스터 < 2. 캐시기억장치 < 3. 주기억장치 < 4. 보조기억장치로 구성
   1 상위계층 ~ 4 하위계층
   1~3까지는 CPU가 직접 접근 가능, 4는 먼저 주기억장치에 적재되어야 CPU가 접근 가능

 기억장치 계층간의 관계
 - 상위계층 : 하위계층 기억장치가 기억하고 있는 내용의 일부를 저장
 - 하위계층 : 모든 데이터가 저장
 - 블록 : 두 계층 간 전송되는 정보의 단위(데이터의 최소단위)
 - 히트 : CPU에 의해서 요구되는 데이터가 상위계층의 어떤 블록에 있을 때
 - 미스 : 상위계층에서 찾을 수 없을 때
 - 히트율 : 상위계층에서 찾을 수 있는 기억장치 접근비율
 - 미스율 : 상위계층에서 찾을 수 없는 기억장치 접근비율

 기억장치 성능평가 요인
 - 기억용량
 - 접근시간 : 기억장치에서 데이터를 판독하거나 기록하는데 걸리는 시간
 - 사이클시간 : 하나의 액세스를 시작한 시간부터 다음 액세스를 시작할때까지의 시간
 - 기억장치 대역폭 : 기억장치의 데이터 처리속도를 말하며 데이터 전송율이라고도 한다
 - 가격

 주기억장치
 - 컴퓨터 시스템에서 필수적인 하드웨어 요소
 - 접근시간, 대역폭, 기억용량이 중요
 - 접근시간 : 주기억장치의 접근시간은 CPU의 클럭사이클과 비교하여 많은 차이, 두 장치간의 속도차이 개선 필요
 - 대역폭 : 주기억장치의 대역폭은 CPU와 보조기억장치, 입출력장치들이 공동으로 사용하므로 제한적
 - 기억용량 : 아무리 큰 용량의 주기억장치도 기억용량의 증가가 요구됨
 - 개선방법
  속도차이 : 복수모듈기억장치, 연간괴억장치 ,캐시기억장치
  기억용량 : 가상기억장치

2. 복수모듈 기억장치
 주기억장치의 대역폭
 - 명령어 수행속도의 제한적인 요소
 - 중앙처리장치와 입출력장치가 주기억장치를 경쟁적으로 이용하기 때문에 병목현상 발생

 대역폭의 개선방법
 - 속도가 빠른 기억소자를 이용하여 설계
 - 주기억장치에서 한 번에 읽을 수 있는 단어의 비트 수를 증가
 - 기억장치의 구조적 개선 -> 복수모듈 기억장치

 복수모듈 기억장치의 개요
 - 기억장치모듈을 여러개 가지고 있는 기억장치(각 모듈은 독자적인 주기억장치)
 - 기억장치를 구성하고 있는 모듈 수만큼 단어들을 동시에 접근 가능

 복수모둘 기억장치의 동작(3모듈)
 - 하나의 모듈에서 기억장치 버스를 통하여 주소를 보내는 동안
   다른 모듈에서는 미리 보낸 주소를 해독하여 접근
   또 다른 모듈에서는 인출한 데이터를 버스를 통해 외부로 내보낸다
 - 이런 동작이 동시에 이루어져서 기억장치의 대역폭을 높일 수 있다
 - 또한 버스를 구성하는 데이터 선들의 수가 많을 때에는 모든 모듈에 동시에 병렬로 접근이 가능하다

 문제점
 - 한개의 버스를 공유할 경우 동시에 요구될 때 버스경합 발생
 - 동시에 한 개이상의 모듈들이 동일 버스를 사용하면 데이터간의 충돌 : 기억장치 충돌
 - 해결방법 : 메모리 인터리빙
   버스경합, 기억장치충돌문제를 해결하기 위해 가억장치를 복수모듈로 구성하고 각 모듈이 동시에 접근할 수 있게 하는 방식
   같은 시각에 CPU로부터 여러 모듈로 동시에 주소를 전달 할 수 없기 때문에 CPU가 각 모듈별로 전송할 주소를 교대로 배치한 후 차례로 전송하여 여러 모듈을 병행접근시키는 기법
   기억장치의 접근시간을 효율적으로 높일 수 있다

3. 연관기억장치
 일반적 기억장치의 경우
 - 저장된 데이터는 단어로 구성되어 있으므로 어떤 데이터에 접근하려면 그 데이터가 저장되어있는 단어의 주소를 알아야 한다
 - 그러나 저장되어 있는 단어의 주소를 모르는 경우 많은 기억장치 사이클이 필요 -> 단어의 주소가 아닌 내용을 이용하는 기억장치 필요

 연관기억장치
 - 기억장치에 저장된 데이터의 내용을 이용하여 기억장치에 접근할 수 있는 기억장치
 - 내용 주소화 기억장치(CAM, Content Addressable Memory) 이라고도 함

4. 캐시기억장치
 개요
 - 주기억장치의 수행속도 개선을 위한 하나의 방법
 - 캐시기억장치는 주기억장치보다 속도가 빠른 기억소자들로 구성되어 중앙처리장치와 주기억장치간의 속도차이를 줄여주는 역할을 한다
 - 중앙처리장치가 주기억장치에 접근하는 대신 캐시기억장치에서 데이터를 가져오게 하는 것이다

 원리
 - 캐시기억장치는 비싸기 때문에 기억용량은 주기억장치의 기억용량보다 훨씬 작다
 - 따라서 중앙처리장치가 주기억장치에 있는 데이터를 캐시기억장치에서 접근하려면 그 데이터를 미리 캐시기억장치에 옮겨놓아야 한다
  데이터를 옮겨 놓기 위해서는 접근할 데이터를 미리 예측할 수 있어야 함
  기억장치 접근에 대한 지역성의 원리를 이용하여 데이터를 캐시기억장치에 옮겨 놓을 수 있다

 어떤 단어를 캐시기억장치로 옮겨 놓기 위해서는 데이터 접근의 지역성을 기초로 그 단어를 포함하는 블록을 캐시기억장치로 미리 옮겨 놓으면 된다.
 즉 가까운 미래에 접근할 데이터를 예측하는 방법이 구현된다

 블록
 - 데이터를 구성하는 최소한의 단위
 - 주기억장치에 내에 연속적으로 저장된 일정한 수의 단어
 - 주기억장치와 캐시기억장치는 모두 같은수의 단어로 구성된 블록으로 나뉘어져 있다

 희생블록
 - 캐시에 미스되었을때 접근하려는 데이터를 캐시에 가져오기 위해 한 블록을 기억시킬 수 있을 공간을 확보해야 되는데 이때 확보된 공간
 - 희생블록의 선택 : 캐시에 있는 블록 중에서 가장 사용되지 않을 것으로 생각되는 불록을 선택
 - 희생블록 : 캐시의 희생블록을 주 기억장치에 원래 공간에 다시 저장하고 캐시의 희생블록이 있던 곳에는 주기억장치의 블록이 저장

 적중률
 - 블록교환이 빈번히 일어나는것은 주기억장치에 접근이 자주 이루어지게 하므로 시간적 낭비를 초래
 - 따라서 데이터를 접근하려 할 때 캐시기억장치에서 히트되는 비율을 나타내는 적중률을 높여 블록교환을 최소화 시켜야 한다
 - 적중률은 캐시 기억장치의 성능을 축정하는 데 사용되며, 적중률이 높을수록 우수하며 보통 0.95~0.99정도면 우수