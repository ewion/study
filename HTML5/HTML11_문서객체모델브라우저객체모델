강의개요
HTML 문서와 브라우저는 내부적으로 각각 문서 객체 모델(DOM)과 브라우저 객체 모델(BOM)로 표현되고 다루어진다.
이번 강의에서는 문서 객체 모델을 통해 HTML 문서의 내용,
구조 및 스타일 등에 동적으로 접근해서 문서를 조작하는 방법과 브라우저 객체 모델을 통해 브라우저의 윈도우를 생성하고 조작하는 방법에 대해서 학습한다.

학습목표
문서 객체 모델을 이해하고, DOM 요소의 다양한 접근 방법을 활용할 수 있다.
DOM 객체를 통해 HTML 요소의 삽입, 삭제, 수정 등의 작업을 동적으로 수행할 수 있다.
브라우저 객체 모델의 개념을 이해하고, window 객체를 활용하여 윈도우에 대한 다양한 작업을 수행할 수 있다.

1. 문서 객체 모델
 DOM, Document Object Model
 - 문서 객체
  HTML문서의 각 요소를 자바스크립트에서 사용할 수 있도록 객체로 만든 것
 - DOM
  브라우저가 HTML 문서에 접근할수있도록 정의해 놓은 표준모델
  HTML문서를 분석하고 표시하는 방식
 - 문서가 적재되면 브라우저는 정적으로 DOM생성
  계층적 구조를 갖는 돔트리
  자바스크립트를 이용하면 프로그램 실행 중 웹문서내용 구조 스타일에 대한 작업 가능

 DOM객체의 접근법
 - ID 속성
  getElementById("아이디명")
  id="아이디명" 속성을 갖는 오직 하나의 요소만선택
  아이디는 유일성을 가짐
 - 요소명
  getElementByTagName("요소명")
  지정한 요소명을 사용하는 모든요소를 찾아 리스트 형태로 반환
 - 클래스명
  getElementByClassName("클래스명")
  class="클래스명" 속성을 갖는 모든요소를 찾아 리스트 형태로 반환

정리하기
문서 객체 모델
문서 객체 → HTML 문서의 요소를 자바스크립트에서 사용할 수 있도록 객체로 만든 것
문서 객체 모델(DOM) → HTML 문서를 분석하고 표시하는 표준 방식 → 트리로 표현 → 문서 자체를 나타내는 document 노드를 루트 노드로 해서 요소 노드, 텍스트 노드, 속성 노드로 구성
DOM 객체의 접근 방법
- getElementById(“아이디명”) → ‘id=“아이디명”’을 속성으로 갖는 오직 하나의 요소만 선택
- getElementsByTagName(“요소명”) → 지정한 요소명을 갖는 모든 요소를 리스트 형태로 반환
- getElementsByClassName(“클래스명”) → ‘class=“클래스명”’을 속성으로 갖는 모든 요소를 리스트 형태로 반환
DOM 요소의 객체 수정
- 요소 내용 수정 → innerHTML 속성(HTML 형식으로 요소의 내용을 취급하는 경우) 또는 textContent 속성(HTML 요소와 속성을 제외하고 내용만 다룰 때 사용하는 경우) 사용
- 요소 속성 수정 → HTML 요소에서 사용하는 속성명을 그대로 사용
- 요소 스타일 수정 → DOM객체변수.style.CSS속성명 사용 → CSS 속성명이 하이픈을 포함하고 있는 경우 하이픈을 없애고 낙타체로 표시
DOM 객체의 삽입과 삭제
- 텍스트가 있는 새 요소 삽입
  ① let 새요소변수 = document.createElement(“요소명”);
  ② 새요소변수.innerHTML = “텍스트 내용”;
  ③ 새요소변수.style.CSS속성명 = “값” → 선택적으로 사용
  ④ let 부모요소 = document.getElementById(“부모요소 아이디”);
      부모요소.appendChild(새요소변수);
- 속성이 있는 새 요소 삽입
  ① let 새요소변수 = document.createElement(“요소명”);
  ② 새요소변수.setAttribute(“속성”, “값”); → 속성이 여러 개이면 반복 사용
  ③ let 부모요소 = document.getElementById(“부모요소 아이디”);
      부모요소.appendChild(새요소변수);
- 기존 요소 삭제 → 부모요소.removeChild(삭제할 자식요소)

브라우저 객체 모델
브라우저 객체 모델(BOM) → 브라우저를 객체로 표현한 것
window 객체 → 창(윈도우)에 대한 전반적인 모든 상황을 제어하는 최상위 객체
- 주요 메서드 → open(), close(), setInterval(), clearInterval(), setTimeout(), clearTimeout(), alert(), confirm(), prompt(), moveBy(), moveTo(), resizeBy(), resizeTo()
윈도우 열기와 닫기
- window.open(“연결할 웹 페이지 URL”, “타킷 창”, “윈도우 속성 리스트”)
- window.close()
윈도우 크기 조절 → resizeBy(), resizeTo()
윈도우 위치 조절 → moveBy(), moveTo()
setTimeout(“호출함수”, 지연시간) → 지정한 시간이 지난 후에 주어진 코드(함수)를 한 번만 실행 → 설정 시간 전에 함수의 수행을 중지하는 경우 clearTimeout() 사용
setInterval(“호출함수”, 시간간격) → 일정한 시간 간격으로 주어진 함수를 반복 호출 → 무한한 호출을 중지하는 경우 clearInterval() 사용
