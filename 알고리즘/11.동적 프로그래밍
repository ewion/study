주요용어
최적성의 원리(principle of optimality)
- 주어진 문제에 대한 최적해는 주어진 문제의 소문제에 대한 최적해로 구성된다는 원리
점화식(recurrence relation)
- 어떤 하나의 값이 자신을 포함한 수식으로 표현되는 식
피보나치 수열(Fibonacci sequence)
- 첫 번째 항과 두 번째 항이 1이며 그 뒤의 항은 바로 앞 두 항의 합으로 이루어지는 수열
행렬의 연쇄적 곱셈
- n개의 행렬을 연속적으로 곱할 때 최소의 기본 곱셈 횟수를 가진 행렬의 곱셈 순서를 구하는 문제
최장 공통 부분 수열(LCS, Longest Common Subsequence)
- 두 스트링의 공통된 부분 수열 중에서 가장 긴 수열
- 부분 수열 → 스트링에서 연속일 필요는 없지만 순서는 유지되는 스트링의 일부분

내용
1. 동적 프로그래밍 기본 개념
 개념
 - 문제의 크기가 작은 소문제에 대한 해를 테이블에 저장해 놓고 이를 이용하여 크기가 보다 큰 문제의 해를 점진적으로 만들어가는 방법
 - 상향식 접근 방법
 - 각 소문제들은 원래 주어진 문제와 동일한 문제 -> 입력 크기만 작아짐
 - 소문제들은 서로 독립적일 필요는 없음
 - 컴퓨터 프로그래밍과는 무관, 해를 구축하는데 테이블을 이용한다는 의미
 - 최적성의 원리
  주어진 문제에 대한 최적해는 주어진 문제의 소문제에 대한 최적해로 구성된다
 - 동적 프로그램 방법의 처리 과정
  1) 최적성의 원리가 적용되는지 확인
  2) 주어진 문제에 대해 최적해를 제공하는 점화식 도출
  3) 가장 작은 소문제부터 점화식의 해를 구한 뒤 이를 테이블에 저장
  4) 테이블에 저장된 소문제의 해를 이용하여 점차적으로 입력의 크기가 큰 상위문제의 해를 구해 나감

 피보나치 수열
 - 동적 프로그래밍 방법을 적용할 수 있음

2. 행렬의 연쇄적 곱셈
 개념
 - n개의 행렬을 연쇄적으로 곱하는 경우
  이때 결합법칙이 성립
  여러가지 다른 곱셈 순서가 존재, 곱셈 횟수가 달라짐
 - 기본 곱셈
  행렬 원소들까지 곱셈

 최적성의 원리
 - n개의 행렬을 곱하는 최적의 순서는 n개 행렬의 연쇄적 곱셈 중 일부분에서의 최적 곱셈 순서를 포함

 성능 및 특징
 - 시간 복잡도 O(n^3)
 - 최적의 행렬 곱셈 순서를 구하는 알고리즘 O(n)

3. 최장 공통 부분 수열
 LCS, Longest Common subsequence
 - 두 스트링의 공통된 부분 수열 중 가장 긴 수열을 구하는 것
 - LCs에서 최적성의 원리
  두 스트링 X와 Y사이의 LCS는 이들의 어떤 서브스트링 사이의 LCS를 포함

 성능과 특징
 - 길이 n과 m인 두 스트링의 LCS길이 -> O(nm)
 - 테이블 LCS[][]로부터 LCS를 구하는 알고리즘 -> O(n+m)
