학습개요
알고리즘의 첫 번째 강의 시간으로서 알고리즘 전반에 걸친 기본적인 개념을 소개한다. 우선 알고리즘의 필요성과 정의를 간단히 살펴본 후, 알고리즘의 대표적인 설계 기법들에 대해서 중점적으로 학습한다.

학습목표
알고리즘의 중요성과 개념을 이해할 수 있다.
대표적인 알고리즘 설계 기법들의 종류와 개념을 이해할 수 있다.
거스름돈 문제와 배낭 문제의 개념, 동작 원리 및 특성을 이해할 수 있다.

주요용어
알고리즘(algorithm)
주어진 문제에 대해 하나 이상의 결과를 생성하기 위해 모호하지 않고 단순 명확하며 컴퓨터가 수행할 수 있는 유한개의 일련의 명령을 순서에 따라 구성한 것

욕심쟁이 방법(greedy method)
해를 구하는 일련의 선택 과정마다 해당 단계에서 ‘가장 최선‘이라고 여겨지는 국부적인 최적해를 선택해 나가면 결과적으로 전체적인 최적해를 구할 수 있을 것이라는 희망적인 전략을 취하는 방법

거스름돈 문제(coin change problem)
가게에게 고객에게 돌려줄 거스름돈이 있을 때 고객이 받을 동전의 개수를 최소로 하면서 거스름돈을 돌려주는 방법을 찾는 문제

배낭 문제(knapsack problem)
배낭의 용량을 초과하지 않는 범위에서 배낭에 들어있는 물체의 이익의 합이 최대가 되도록 배낭에 물체를 넣는 방법을 찾아내는 문제
* 0/1 배낭 문제 : 배낭에 넣는 물체를 쪼갤 수 없다는 가정이 있는 배낭 문제로서, 이 경우에는 욕심쟁이 방법으로 해결할 수 없는 NP-완전문제가 된다.

분할정복 방법(divide-and-conquer method)
순환적으로 문제를 푸는 하향식 접근 방식으로, 주어진 문제의 입력을 더 이상 쪼갤 수 없을 때까지 2개 이상의 작은 문제로 순환적으로 분할하고, 이렇게 분할된 작은 문제들을 각각 해결한 후 이들의 해를 결합하여 원래 문제의 해를 구하는 방법

동적 프로그래밍 방법(dynamic programming method)
주어진 문제의 입력의 크기가 가장 작은 부분 문제부터 해를 구하여 저장해 놓고 이를 이용하여 입력 크기가 보다 큰 원래의 문제를 점진적으로 해결하는 상향식 접근 방법

1. 소개


2. 기본 개념
 알고리즘이란
 - 데이터를 처리하는 수식
 - 주어진 문제를 풀기 위한 방법
 - 단계적인 처리 절차

 알고리즘의 정의
 - 입출력 : 0개이사으이 외부입력, 1개이상의 출력
 - 명확성 : 각 명령은 모호하지 않고 단순명확
 - 유한성 : 한정된 수의 단계를 거친 후에는 반드시 종료
 - 유효성 : 모든 명령은 컴퓨터에서 수행 가능할것
  중요 : 알고리즘은 효율적이어야 함
 - 주어진 문제를 해결하거나 함수를 계산하기 위해 따라야 할 명령어들을 단계적으로 나열한 것


3. 알고리즘 설계
 하나씩 비교
 토너먼트 방식
 순차탐색

 대표적 알고리즘 설계 기법
 - 욕심쟁이 ( greedy, 탐욕, 탐욕적)
  해를 구하는 일련의 선택 과정에서 전후단계과는 상관없이 각 단계에서의 최선의 최적해만 선택하여 희망적인 전략을 취하는 방법
  간단하면서 효율적인 알고리즘을 만들수 있는 강력한 기법
  최솟값, 최대값을 구하는 최적화 문제에 주로 사용
  한계 : 국부적 최적해가 전체 최적해를 구성하지 못할 수 있다
   옷을 입는 것을 생각, 옷들의 조화를 생각하지 않고 상하의, 자켓마다 가장 멋있다고 생각하는 옷을 입는다면
  대표적 응용 문제
   거스름돈, 배낭 문제, 4장(그래프) 크루스칼/프림/데이크스트라 알고리즘
  거스름돈 문제
   고객에게 돌려줄 거스름돈이 T만큼 있을 때, 고객이 받을 동전의 개수를 최소로 하면서 거스름돈을 돌려주는 방법을 찾는 문제
   거스름돈의 액수를 초과하지 않으면서 동전의 액면가가 단순히 큰 것부터 욕심을 부려 최대한 뽑아 거스름돈을 만듬
   ex) 거스름돈이 780원 -> 500원 줌 -> 100원줌 -> 100원줌 -> 50원줌 -> 10원줌*3
  배낭 문제
   가정
   - 최대 용량 M인 하나의 배낭 n개의 물체가 있다고 가정
   - 각 물체 i 에는 물체의 무게 wi와 해당 물체를 배낭에 넣었을 때 얻을 수 있는 이익 pi가 부여
   - 배낭의 용량을 초과하지 않는 범위 내에서 최대이익을 찾는 문제
   - 물체를 쪼개서 넣을 수 있거나("일반적 배낭 문제") 없음("0/1배낭 문제")
   해결 방안
   - 단위무게당 이익이 가장 큰 물체부터 넣고, 남은 공간은 쪼개서 넣음("일반적 배낭 문제")
   - 0/1배낭 문제는 욕심쟁이 방법으로 해결 불가, 난이도가 높은 문제

 - 분할정복
  순환적으로 문제를 푸는 하향식 접근 방법
  주어진 문제의 입력을 더 이상 나눌 수 없을때까지 2개 이상의 작은 문제들로 순환적으로 분할하고, 분할된 작은 문제들을 각각 해결 후 이 해들을 결합하여 원래 문제의 해를 구하는 방식
  각 순환 호출마다 세단계 작업 수행
  - 분할 : 주어진 문제의 입력을 여러개의 작은 문제로 분할
  - 정복 : 작은 문제들을 순환적으로 분할, 더이상 분할할수없을정도로 크기가 작으면 해를 구함
  - 결합 : 작은 문제에 대해 정복된 해를 결합하여 원래 문제의 해를 구함

 - 동적 프로그래밍 (교재5장)
  입력의 크기가 가장 작은 부분부터 문제부터 해를 구하여 테이블에 저장
  이를 이용하여 입력 크기가 보다 큰 문제의 해를 점진적으로 만들어 가는 상향식 접근 방법
  각각의 작은 문제는 원래 문제와 동일, 입력의 크기만 작음
  작은 문제들은 서로 독립일 필요가 없음

정리하기
1. 기본 개념
⦁ 알고리즘 → 주어진 문제를 해결하거나 함수를 계산하기 위해 따라야 할 명령어들을 단계적으로 나열한 것
- 만족해야 할 조건 → (입출력, 명확성, 유한성, 유효성) + (실용적 관점에서는 ‘효율성’도 중요)
2. 알고리즘 설계
⦁ 알고리즘 생성 과정: 설계 → 표현(기술) → 정확성 분석 → 효율성 분석
⦁ 많은 부류의 문제에 적용될 수 있는 대표적인 설계 방법 → 욕심쟁이 방법, 분할정복 방법, 동적 프로그래밍 방법
⦁ 욕심쟁이 방법
- 해를 구하는 일련의 선택 단계마다 전후 단계의 선택과는 무관하게 해당 단계에서 가장 최선이라고 볼 수 있는 국부적인 최적해를 선택해 나가면 결과적으로 전체적인 최적해를 구할 수 있을 것이라는 희망적인 전략을 취하는 방법
- 한계 → 국부적인 최적해가 항상 전체적인 최적해를 구성하지 못하는 경우도 있음
- 적용 알고리즘/문제 → 거스름돈 문제, 배낭 문제, 최소 신장 트리(크루스칼 알고리즘, 프림 알고리즘), 단일 출발점 최단 경로(데이크스트라 알고리즘)
- 거스름돈 문제 → 가게에서 고객에게 돌려줄 거스름돈이 있을 때 고객이 받을 동전의 개수를 최소로 하면서 거스름돈을 돌려주는 방법을 찾는 문제 → 동전의 액면가가 일반적인 경우에는 욕심쟁이 방법 적용 불가
- 배낭 문제 → 배낭의 용량을 초과하지 않는 범위 내에서 배낭에 들어 있는 물체들의 이익의 합이 최대가 되도록 물체를 넣는 방법을 찾는 문제 → 물체를 쪼개서 넣을 수 없는 ‘0/1 배낭 문제’는 욕심쟁이 방법 적용 불가
⦁ 분할정복 방법
- 주어진 문제의 입력을 더 이상 나눌 수 없을 때까지 2개 이상의 작은 문제들로 순환적으로 분할하고, 이렇게 분할된 작은 문제들을 각각 해결한 후 이들의 해를 결합하여 원래 문제의 해를 구하는 하향식 접근 방식
- 분할된 문제는 입력 크기만 작아졌을 뿐 원래 문제와 동일하며 서로 독립적
- ‘분할’-‘정복’-‘결합’의 단계로 구성
- 적용 알고리즘/문제 → 이진 탐색, 퀵 정렬, 합병 정렬
⦁ 동적 프로그래밍 방법
- 입력의 크기가 가장 작은 부분 문제부터 해를 구하여 저장해 놓고 이를 이용해서 입력 크기가 보다 큰 문제의 해를 점진적으로 만들어 가는 상향식 접근 방법
- 분할된 문제는 입력 크기만 작아졌을 뿐 원래 문제와 동일하며 서로 독립적일 필요는 없음
- 적용 알고리즘/문제 → 모든 정점 쌍 간의 최단 경로를 구하는 플로이드 알고리즘, 교재 5장(행렬의 연쇄적 곱셈 문제, 최장 공통 부분 수열 문제)