 학습개요
이번 강의에서는 앞으로 다룰 다양한 알고리즘에 적용될 기본적이고 핵심적인 개념으로, 알고리즘의 성능을 분석하고 점근성능으로 표기하는 방법을 중심으로 학습한다.
또한 순환 알고리즘의 개념과 이를 위한 점화식에 대해서도 살펴본다.

학습목표
알고리즘의 시간 복잡도의 개념을 이해하고 적용할 수 있다.
점근성능의 표기법의 종류와 개념을 이해하고 적용할 수 있다.
순환 알고리즘과 점화식의 관계 및 기본 점화식의 의미를 이해할 수 있다.

주요용어
시간 복잡도(time complexity)
-알고리즘을 실행시켜 완료할 때까지 걸리는 시간
-알고리즘에서 수행되는 단위 연산의 수행 횟수의 합으로 정의되며, 입력 크기의 함수와 최악의 수행시간으로 표현

공간 복잡도(space complexity)
알고리즘 수행에 필요한 총 메모리의 양(=정적 공간 + 동적 공간)

점근성능(asymptotic performance)
-입력의 크기가 무한히 커짐에 따라 결정되는 알고리즘의 성능
-표기법: f(n) = O(g(n)) → 점근적 상한, f(n)=Ω(g(n)) → 점근적 하한, f(n)=Θ(g(n)) → 점근적 상하한

순환 알고리즘(recursive algorithm, 재귀 알고리즘)
-알고리즘의 수행 과정에서 자기 자신의 알고리즘을 다시 호출하여 수행하는 형태의 알고리즘
-순환 알고리즘의 수행시간은 기본적으로 점화식 형태로 표현됨

점화식(recurrence equation)
- 함수의 한 값이 자신을 포함한 수식으로 다시 표현된 식
- 점화식을 풀어서 구한 폐쇄형으로 성능 표현

내용
1. 알고리즘 분석
 정확성 분석
 - 유효한 입력에 대해 정확한 결과 생성 여부
 - 교재에 소개된 것은 정확성 면에서는 검증되있으므로 따로 다루지 않음
 효율성 분석
 - 알고리즘 수행에 필요한 컴퓨터 자원의 양을 측정/평가
 - 공간 복잡도
  메모리의 양 = 정적 공간 + 동적 공간
 - 시간 복잡도
  알고리즘의 수행 시간을 의미, 알고리즘의 실행부터 완료까지 걸리는 시간

 컴퓨터에서 실행시켜 실제 수행시간을 측정하는 방법
 - 실행 환경에 대해 종속적이므로 일반성이 결여됨
 - 알고리즘 수행 시간 = 시그마{각 문장이 수행되는 횟수}

 시간 복잡도
 - 입력 크기가 커질수록 수행시간도 증가
 - 입력 데이터의 상태에 종속적

 최악의 수행시간
 - ex) 출근시 맥시멈으로 늦는 시간 버스대기시간, 신호대기시간 등 맥스로 했을때

2. 점근성능
  입력크기 n이 무한이 커짐에 따라 결정되는 성능

  점근성능의 결정 방법
  - 입력 크기가 충분히 커짐에 따라 함숫값에 큰 영향을 주는 차수를 찾음
  - 수행시간의 다항식 함수에서 최고차항만을 계수 없이 취해 표현
   수행시간의 정확한 값이 아닌 어림값
   수행시간의 증가 추세를 파악하는 것이 쉬움
   알고리즘 간의 우열을 따질 때 유용

  점근성능의 표기법
  Big-oh 점근적 상한
  Big-theta 점근적 상하한

  f(n)의 최고차항을 그대로 가져다 쓰면 된다.

3. 순환 알고리즘
 순환 알고리즘
 - 알고리즘의 수행 과정에서 자기 자신의 알고리즘을 다시 수행하는 형태
정리하기
1. 알고리즘 분석
⦁ 알고리즘 분석 → 정확성 분석, 효율성 분석
⦁ 정확성 분석 → 올바른 입력이 주어졌을 때 유한 시간 내에 정확한 결과를 생성하는 지를 수학적으로 증명하는 것
⦁ 효율성 분석 → 알고리즘 수행에 필요한 컴퓨터 자원의 양을 측정
- 공간 복잡도 → 알고리즘 수행에 필요한 총 메모리의 양
- 시간 복잡도 → 알고리즘의 수행시간
⦁ 알고리즘 수행시간 → 알고리즘의 각 단위 연산(문장)이 수행되는 횟수의 합
- 입력 크기의 함수로 표현
- 데이터의 입력 상태에 따라 달라짐 → 최악의 수행시간으로 표현
2. 점근성능
⦁ 입력 크기가 무한히 커짐에 따라 결정되는 성능
- 수행시간의 다항식 함수에서 최고차항만을 계수 없이 취해서 단순하게 표현하는 방법 → 알고리즘 수행시간의 증가 추세를 나타내므로 알고리즘 간의 우열 표현/비교에 용이
- 요소 → 시작
⦁ 표기법
- O-표기(“Big-oh”) → 점근적 상한 → 알고리즘의 최악의 수행시간에 해당
- Ω-표기(“Big-omega”) → 점근적 하한 → 최선의 수행시간에 해당
- Θ-표기(“Big-theta”) → 점근적 상한과 하한을 동시에 표시
⦁ O–표기의 함수 간의 크기 관계 → O(1) < O(logn) < O(n) < O(nlogn) < O(n2) < O(n3) < O(2n)
⦁ 실용적인 계산 방법 → 알고리즘에 나타난 루프(반복문)의 반복횟수를 조사하여 최고 차수를 시간 복잡도로 취함
3. 순환 알고리즘
⦁ 알고리즘의 수행 과정에서 자기 자신의 알고리즘을 다시 호출하여 수행하는 형태의 알고리즘
- 수행시간은 점화식으로 표현되고, 이를 풀어서 폐쇄형으로 표시
- 분할정복 방법의 적용된 알고리즘(이진 탐색, 퀵 정렬, 합병 정렬)은 기본적으로 순환 알고리즘 형태로 표현됨
⦁ 기본적인 점화식과 폐쇄형
① T(n) = T(n-1) + Θ(1), T(1)=Θ(1) → T(n) = Θ(n)
② T(n) = T(n-1) + Θ(n), T(1)=Θ(1) → T(n) = Θ(n2) → 퀵 정렬의 최악 수행 시간
③ T(n) = T(n/2) + Θ(1), T(1)=Θ(1) → T(n) = Θ(logn) → 이진 탐색의 수행 시간
④ T(n) = T(n/2) + Θ(n), T(1)=Θ(1) → T(n) = Θ(n)
⑤ T(n) = 2T(n/2) + Θ(1), T(1)=Θ(1) → T(n) = Θ(n)
⑥ T(n) = 2T(n/2) + Θ(n), T(1)=Θ(1) → T(n) = Θ(nlogn) → 퀵 정렬의 최선 수행 시간, 합병 정렬의 수행 시간

