
 도커컨테이너 통신
도커 컨테이너는 기본적으로 독립된 환경에서 실행되기 때문에 컨테이너 밖에서 접근할 수 없음

따라서 컨테이너와 통신하기 위해서 컨테어를 가동시키면서 p옵션으로 호스트의 포트와 컨테이너의 포트를 설정해야 함

 명령어
     -p 호스트 포트:컨테이너 포트
 ex) -p 8080:80

이 설정을 사용하기 위해서는 호스트에서 사용 중인 포트와 번호가 겹쳐지지 않는지 확인 해야함

 도커파일
도커 이미지를 생성하기 위한 스크립트 파일
여러 키워드를 사용하여 토커파일을 작성하여 빌드를 보다 쉽게 수행가능

도커파일에서 사용되는 주요 키워드(인스트럭션)
FROM
 base가 되는 이미지 지정, 주로 OS나 런타임 이미지 지정
RUN
 이미지를 빌드할 때 사용하는 커맨드를 설정할 때 사용
ADD
 이미지에 호스트 파일이나 폴더를 추가하기 위해 사용
 만약 이미지에 복사하려는 디렉토리가 존재하지 않으면 docker가 자동으로 생성
COPY
 호스트 환경의 파일이나 폴더를 이미지 안으로 복사하기 위해 사용
 ADD와 동일하게 동작하지만 확실한 차이점은 URL을 지정하거나, 압축파일을 자동으로 풀지 않음
EXPOSE
 이미지가 통신에 사용할 포트를 지정할 때 사용
ENV
 환경 변수 지정할 떄 사용, 여기서 설정한 변수는 ${name}, $name의 형태로 사용 가능
CMD
 도커 컨테이너가 실행될 때 실행할 커맨드 지정
 RUN과 비슷하지만 CMD는 도커 이미지를 빌드할 때 실행되는 것이 아니라 컨테이너를 시작할 때 실행된다는 것이 다름
ENTRYPOINT
 도커 이미지가 실행 될 때 사용되는 기본 커맨드 지정(강제)
WORKDIR
 RUN, CMD, ENTRYPOINT 등을 사용한 커맨드를 지정하는 디렉토리 지정
 -w 옵션으로 오버라이딩 가능
VOLUME
 퍼시스턴스 데이터 저장할 경로 지정
 호스트의 디렉토리를 도커컨테이너에 연결
 주로 휘발성으로 사용하면 안되는 데이터를 저장할 때 사용
 DB를 서비스 할때 유용
기타 : SHELL, LABEL, USER, ARG, STOPSIGNAL, HEALTHCHECK
위 커맨드들을 기반으로 도커파일을 작성
도커파일을 실행하기 위해서는 docker build 커맨드 사용

docker build ${option} ${dockerfile diretory}
생성된 이미지를 컨테이너로 실행하기 위해서는 run 커맨드 사용