데이터(data) 영역 : 전역변수와 static 변수가 저장되는 기억공간 영역
힙(heap)영역 : 프로그래머의 필요에 의해 할당과 소멸이 이루어지는 기억공간영역
스택(stack)영역 : 지역변수와 매개변수가 저장되는 기억공간 영역
메모리 정적할당 : 프로그램이 작성되는 단계에서 기억공간의 크기가 결정되는 기억공간 확보방법
메모리 동적할당 : 프로그램이 실행되는 중에 입력되는 자료에 따라 기억공간의 크기를 결정할 수 있는 기억공간 확보방법

1. 메모리 동적할당의 개념
 C언어에서 기억공간
 - 프로그램의 실행을 위해 기억공간 필요
 - 기억공간은 운영체제에서 할당
 - 할당되는 기억공간의 영역
  각각 데이터, 힙, 스택 영역
 - 자바 언어는 가비지컬렉션이 존재

 기억공간의 확보 방법
 - 메모리 정적 할당 (Static Allocation)
  기억공간의 데이터 영역과 스택 영역 이용
  프로그램 작성 단계에서 필요한 기억공간 크기를 결정
 - 메모리 동적 할당 (Dynamic Allocation)
  기억공간의 힙 영역 이용

 기억공간의 할당 영역
 - 데이터 영역
  전역변수와 정적변수(static) 가 저장되는 영역
  프로그램이 시작함과 동시에 할당, 프로그램 종료와 함께 소멸
 - 힙 영역
  프로그래머의 필요에 의해 할당/소멸이 이루어지는 영역
  실행이 되면서 그 크기가 늘어나고 줄어들며 자유 기억공간이라고도 불림
  메모리 동적 할당에 사용되는 영역
 - 스택 영역
  지역변수, 매개변수가 저장되는 영역
  함수 호출이 완료되면 소멸

2. 메모리 정적할당
 개념
 - 변수 선언이나 선언과 같이 프로그램을 작성하는 단계에서 필요한 기억공간의 크기를 결정
 - 변수 선언과 같이 할당시켜줘야 할 기억공간의 한계 크기를 명확히 알고 있을 경우 사용
 - 메모리 정적할당은 프로그램이 시작 될 때 미리 기억공간의 크기를 정하여 할당하는 것

 메모리 정적할당의 장단점
 - 장점
  프로그램에서 사용하게 될 변수의 기억공간의 크기를 알고 있다면
  메모리 정적할당은 쉽게 기억공간을 사용할 수 있고 에러 발생 확률 낮출수있다
 - 단점
  사용하게 될 기억공간의 크기를 정확히 알지 못하거나 사용하는 자료들의 크기가 각각 다르다면
  기억공간의 낭비를 초래

3. 메모리 동적할당 함수
 메모리 동적할당의 장단점
 - 장점
  힙 영역을 이용하여 프로그램 실행 중 입력되는 자료의 크기에 맞게 기억공간 확보
  많은 자료를 처리하는 배열의 크기를 실행시간에 정의해야 하는 경우 특히 유용
  프로그램 실행 시 기억공간의 크기를 지정할수 있고 재조정 가능
 - 단점
  시간이 지체되는 단점

 순서
  1. 기억공간을 동적으로 할당받을 변수를 포인터를 이용해서 선언한다
  2. malloc() 함수 등을 이용하여 기억공간을 동적으로 할당한다
  3. 기억공간의 사용이 끝나면 free() 함수를 이용하여 기억공간을 해제한다

 메모리 동적할당 함수
 - malloc()
 - calloc()
 - realloc()
 - free()

 malloc() 함수
 - 형식
  void * malloc(size_t number_of_bytes);
  number_of_bytes에서 주어지는 크기만큼 기억공간을 동적으로 할당한다
 - 인자로 할당받고자 하는 메모리의 크기를 byte 단위로 전달
 - 힙 영역에 그 크기만큼 기억공간을 할당하고, 할당한 기억공간의 첫 번째 주소 반환
 - void*로 명시하여 어떤 형으로든 형 변환 가능
 - 초기화 되지 않음, 기억공간의 초기화를 위해서는 memset()사용

 free() 함수
 - 형식
  void free(void *p)
 - 힙 영역에 할당된 공간은 프로그램이 종료될 때 까지 유지
 - 할당된 기억공간을 해제하지 않으면 메모리 부족현상 발생, 따라서 명시적 반납 필요

 calloc() 함수
 - 형식
  void * calloc(int n, int size)
  주어진 사이즈의 크기를 가지는 기억공간 n개를 할당받는다
 - malloc() 함수와 동일하게 힙 영역에 기억공간 할당
 - 다른점은 사용하는 형태와 할당된 기억공간을 0으로 초기화

 realloc() 함수
 - 형식
  void * realloc(void *p, int size)
  포인터 p가 가리키고 있는 메모리 크기를 size로 변경
 - 이미 할당받은 메모리의 크기를 변경해야할 필요가 있을 때 사용

4. 기억공간 관리함수
 memcmp() 함수
 - 형식
  int memcmp(void *s1,
             void *s2, size_t n)
  s1 과 s2가 가리키는 기억공간의 내용을 n byte만큼 비교
 - 기억공간에 들어있는 자료를 주어지는 크기만큼 비교하여 같은지 여부를 알수있게 함

 memcpy()
 - 형식
  void *memcpy(void *dest,
                const void *src, size_t n);
  src에서 n byte 만큼 dest에 복사
 - 메모리의 자료를 다른메모리 영역으로 복사하는 함수

 memset()
 - 형식
  void *memset(void *s, int c, size_t n)
  포인터 s가 가리키는 곳을 c값으로 n 바이트만큼 채움
 - 기억공간의 자료를 지정한 문자로 채우는 함수
 - 할당된 메모리의 초기화, 내용삭제를 위해 주로 사용