학습개요
이번 강의에서는 함수와 구조체에 대해 공부하고 typedef와 구조체 비트필드 개념, 공용체에 대해 학습한다.

학습목표
구조체를 이용한 매개변수사이의 자료전달 방법을 이해 할 수 있다.
typedef를 이용하여 새로운 자료형을 정의할 수 있다.
구조체 비트필드를 선언하고 사용할 수 있다.
공용체를 사용할 수 있다.

주요용어
typedef : 이미 존재하는 자료형에 새로운 이름을 부여하기 위한 키워드
구조체 비트필드 : 주기억장치의 기억공간을 byte 단위가 아닌 bit 단위로 사용하는 방법
공용체 : 동일한 기억장소에 여러 유형의 자료를 저장하기 위해 정의하는 자료형


내용
1. 함수와 구조체
 함수에서의 구조체 사용
 - 구조체를 함수의 매개변수로 사용하는 경우
  일반변수를 함수의 매개변수로 사용하는 것과 동일
  매개변수가 구조체인 경우 함수의 형식매개변수를 구조체로 선언
  해당 구조체 전체가 복사되기 때문에 편리함
  구조체 전체가 복사되기 때문에 시간과 공간의 낭비가 큼

 - 구조체 포인터를 함수의 매개변수로 사용하는 경우

2. typedef
 개념
 - 이미 존재하는 자료형에 새로운 이름을 붙이기 위한 키워드
 - 타입 데피니션, 형을 재정의함
 - 간단하거나 의미있는 이름으로 바꿀 수 있어 프로그램 이해가 쉬움
 - 구조체 형을 선언하는데 많이 사용

 사용법
 typedef unsigned int BYTE -> unsigned int형을 BYTE라는 새로운 이름으로 정의
 BYTE val ; -> 컴파일러가 unsigned int를 val로 해석

3. 구조체비트필드
 개념
 - 주기억장치의 기억공간을 byte 단위가 아닌 bit단위로 사용
  프로그램 시 bit단위의 연산이 필요한 경우 int형 변수를 사용
  이 때 int형은 4byte(32bit)이므로 1bit를 제외한 31bit의 기억공간이 낭비
 - 구조체 비트필드를 사용하면 기억공간 절약하고 융통성 있는 데이터 구조체를 만들 수 있다

4. 공용체의 개념
 개념
 - 동일한 기억장소에 여러 유형의 자료를 저장하기 위해 프로그래머가 선언한 자료형
 - 공용체 안에 포함된 자료들이 같은 기억장소를 공유하여 사용
 - 사용될 자료의 자료형이 유동적인 경우 기억공간을 효율적으로 사용할 수 있는 장점
 - 예
  공용체의 멤버들이 완전히 다른 자료형을 가질 때 기억공간을 절약하기 위해 사용할 때
  원화로 월급 : 정수형
  달러로 월급 : 실수형
  이런 경우 공용체를 사용하면 필요에 따라 메모리의 자료형을 유동적으로 사용 가능

 정의
  union 공용체명 {
  멤버 1;
  멤버 2;
  ...
 }
  union var {
    char a;
    int b;
    float c;

   }

5. 공용체의 사용