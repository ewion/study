학습개요
본 강의에서는 C++ 프로그래밍 언어의 기본적인 형식에 대하여 학습한다.
이 강의를 통해 프로그램을 구성하는 소스파일의 종류와 선행처리, 명칭공간, main함수 등 기초적인 C++ 프로그램을 작성하는 방법을 알 수 있게 될 것이다.
C 언어를 학습한 경우 기본적 사항은 유사한 부분이 많아 쉽게 이해할 수 있으나, C++에서 어떤 부분이 어떻게 다른지 확인해 보고 실습해 보기 바란다.

학습목표
C++ 프로그램을 구성하는 소스파일의 용도를 설명할 수 있다.
선행처리, 문장, 함수 등 C++ 언어의 기본 요소들로 구성된 최소한의 프로그램을 작성할 수 있다.
통합개발환경을 통해 프로그램을 작성하고 빌드하여 실행 프로그램을 만들 수 있다.

주요용어
 소스 파일트
프로그래밍 언어의 문법에 따라 작성된 프로그램을 저장하고 있는 파일
 헤더파일
여러 소스 파일에 공통적으로 선언되는 내용을 담고 있는 파일로, 그 헤더파일의 내용이 필요한 소스 프로그램 파일에 삽입된 후 컴파일된다.
 빌드(build)
프로그램의 소스 파일을 실행 가능한 프로그램 파일로 변환하는 것을 의미하는데, 컴파일이 필요한 소스 파일들을 컴파일하고, 그 결과와 라이브러리 등을 링크하는 처리가 이루어진다.
 통합개발환경(integrated development environment, IDE)
컴퓨터 프로그램을 만드는데 필요한 소스 파일 편집기, 컴파일러, 링커, 디버깅 도구 등 소프트웨어 개발에 필요한 도구를 모아 놓은 소프트웨어이다.
 선행처리기 지시어(preprocessor directives)
C++ 프로그램을 컴파일하기 전에 소스 프로그램을 가공하여 컴파일러가 실제로 번역할 소스 프로그램을 만드는 선행처리를 지시하는 명령어
 스트림(stream)
시간에 따라 순서대로 입력되거나 출력되는 일련의 데이터
 백색공백 문자(whitespace character)
컴퓨터에서 수평 또는 수직 방향의 공간을 표현하는 문자로, 공백문자, 탭, 새줄 문자 등이 이에 해당된다.
 명칭공간(name space)
특정한 명칭들이 인식되는 프로그램의 부분으로, 다른 영역에 선언된 명칭과 무관하게 명칭공간 내에서 자유롭게 명칭을 선언하여 사용할 수 있게 한다.

내용

1. c언어 소개
 개요
 - c++은 c언어에 객체지향, 일반화, 예외처리 기능을 넣은 객체지향 언어이다
 - 상속, 등 기능 제공
 선행처리
 - c++프로그램을 컴파일하기전에 소스프로그램을 가공하여 컴파일러가 실제로 번역할 소스프로그램을 만드는 것
 - 선행처리기 지시어로 처리 지시
  선행처리기 지시어는 #으로 시작
  선행처리기 지시어 문장은 한 행에 한개의 문장 작성
 - 대표적 선행처리
  헤더파일 삽입       #include
  매크로 선언 및 해제  #define, #undef
  조건부 컴파일       #if, #ifdef, #ifndef

 문장
 - 하나의 문장은 단어, 연산자, 숫자, 문자, 문자열, 문장부호, 공백 등을 정해진 문법에 따라 작성
 - 문장의 끝은 세미콜론을 기입하여 다음 문장과 구분함

 블록
 - 한개 이상의 문장을 중괄호 안에 나열하여 묶어 놓은 것 { }
 - 여러개의 문장을 하나의 문장으로 취급하거나 함수의 몸체를 구성하기 위해 사용

 함수

 입출력 스트림
 - std::cout 객체
  표준 출력 스트림 객체
  데이터를 문자열로 변환하여 출력
  출력연산자(삽입연산자) : <<
  ex) std::cout << "출력할 내용";
 - std::cin
  문자열을 입력 변수의 자료형의 값으로 변환하여 입렵
  출력연산자(삽입연산자) : >>
  백색 공백 문자는 구분 문자로 취급(tab누르면 나오는 공백)

 명칭공간
 - 특정한 명칭들이 인식되는 프로그램의 부분
 - 다른 영역의 명칭 선언과 무관하게 명칭공간 내에서 자유롭게 명칭을 선언해서 사용할 수 있음
 - 동일한 명칭이라도 서로다른 명칭공간에서 선언되었다면 별개의 것으로 구분
 - 여러 프로그래머가 작성한 프로그램을 결합하여 완성된 프로그램을 만들 경우 각자 필요한 명칭을 독립적으로 만들어 사용 할 수 있음
 - 전역 명칭공간 : 특정 명칭공간에 속하지 않는 기본 명칭공간, 개발에 참여하는 개발자 모두가 공유해야할 경우 사용
 - std 명칭공간 : 표준 c++라이브러리의 명칭들이 정의되어 있는 공간
 - using을 이용한 명칭공간 사용
  특정 명칭공간 또는 그 내부의 특정 이름을 자주 사용하는 경우 명칭공간 이름을 간소화 할 수 있음