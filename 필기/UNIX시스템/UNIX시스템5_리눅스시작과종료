학습개요
운영체제의 일반적 부팅 절차와 리눅스 시스템의 부팅 과정을 살펴본다.
‘systemd 데몬’을 사용한 초기화 작업과 ‘기본 타깃’의 의미를 이해한다.
시스템 자원이나 시스템 서비스를 나타내는 유닛 개념을 이해하고, 서비스 데몬의 실행과 관리 및 시스템의 전원 관리에 필요한 관리자 명령을 학습한다.

학습목표
일반적인 운영체제의 부팅 과정을 설명할 수 있다.
리눅스 시스템의 부팅 과정과 유닛 개념을 설명할 수 있다.
시스템 서비스를 시작시키거나 종료시킬 수 있다.
리눅스의 재부팅과 종료 방법을 설명할 수 있다.

1. 운영체제의 부팅
 부팅 과정
 - 전원을 켜고 로그인 프롬프트가 나올 때까지 과정
 - 1. ROM BIOS 펌웨어 실행
  BIOS기반 x86가정
  하드웨어 검사 후 부트로더를 적재
 - 2. MBR에 있는 부트로더가 실행됨
  파티션 테이블을 조사하여 부팅 가능한 파티션을 찾음
  리눅스의 부트로더인 GRUB을 찾아 적재함
  GRUB은 그래픽 인터페이스와 멀티부팅 지원
 - 3. 커널 이미지와 initramfs를 로드
  커널 이미지는 /boot/vmlinuz-<kernel-version>
  initramfs는 부팅 과정에서 필요한 임시 파일 시스템
 - 4. 커널이 실행됨
 - 5. 하드웨어를 점검하고 초기화
  메모리, 프로세서 저장장치, 주변장치 등
  디바이스를 찾고 디바이스 드라이버를 로드
 - 6. 루트(/) 파일 시스템을 마운트하고 검사
 - 7. 커널은 /lib/systemd/systemd 프로그램을 실행시키고 제어를 넘김
  systemd 프로세스는 시스템 운영을 위한 나머지 초기화 과정 처리
  systemd는 부팅이 끝난 후에도 계속 수행

 부팅 과정과 초기화
 POST -> BIOS펌웨어 -> 부트로더 -> 부트 디바이스 -> GRUB -> kernel + initramfs -> systemd (/lib/system/systemd) -> /etc/systemd/system/defalut.target

2. 초기화 데몬
 전통적 init 데몬
 - System V init 데몬이라고도 함
 - 런레벨에 따라 실행 또는 중단되어야할 서비스가 정해짐
 - 시간이 오래걸리며 복잡한 초기화스크립트로 인해 새로운 하드웨어나 서비스의 등장에 효울적 대처가 어려움
 Upstart init 데몬
 - 이벤트 기반으로 서비스를 실행하는 방식
 - 복잡한 스크립트가 간단한 설정 파일들로 대체됨
 - RHEL6 에서 채택

 systemd 프로세스
 - 커널이 실행시키는 첫 번째 사용자 프로세스
 - 모든 사용자 프로세스의 최상위 조상 프로세스(PID 가 1)
  ps -e 또는 ps ax명령으로 확인
 - 나머지 부팅 과정 즉 시스템 초기화 작업을 실행
  초기화 데몬이라고고 함
  사용자 환경 준비, 시스템 파일의 마운트, 시스템 운영을 위한 서비스 프로그램 실행
  서비스들의 병렬 시작, 온디맨드 활성, 서비스 간 의존성 해결
 - 이후 계속 수행되며 시스템운영을 관리하고 셧다운까지 처리
  시스템 상태 모니터링 데몬 관리
  사용자 프로세스 정리, 로그아웃 처리, 로그인 서비스의 제공 등

 유닛
 - systemd에서 등장한 개념
 - systemd가 관리하는 시스템 자원이나 서비스와 같은 시스템 구성요소
 - 유닛의 동작, 의존성, 실행옵션 등은 유닛설정파일에서 설정 항목으로 제어됨

 기본 타깃과 런레벨
 - 기본 타깃(부팅 모드 또는 런레벨)을 확인 또는 변경하는 명령
 - 초기 런레벨은 0 도는 6이 되어서 안됨
 - 타깃과 런레벨 비교
  0     runlevel0.target, poweroff.target   시스템 종료하고 전원 종료
  1     runlevel1.target, rescue.target     단일 사용자 모드로 복구셸을 설정
  2~4   runlevel2.target, runlevel3.target  그래픽 없는 다중 사용자 시스템 설정
        runlevel4.target, multi-user.target
  5     runlevel5.target, graphical.target  그래픽 다중 사용자 시스템 설정
  6     runlevel6.target, reboot.target     시스템 종료 후 재부팅

 현재 타깃을 다른 타깃 유닛으로 바꾸는 관리자 명령
 - systemctl isolate <name.target>

 telinit 명령
 - 런레벨을 바꾸는 관리자 명령
 - telinit3 은 런레벨을 변경하며 텍스트 모드만 지원
 - telinit0 은 종료, telinit6은 재부팅
 runlevel 명령
 - 이전 런레벨과 현재 런레벨을 확인하는 명령

 시스템 서비스 관리
 - 과거 서비스 수행을 위한 초기화 스크립트는 서비스 유닛으로 대체
 - 관리자는 systemctl 명령을 사용하여 시스템서비스의 상태보기, 시작, 멈춤, 재시작, 활성화 및 비활성화 작업 수행 가능
 - systemctl [option] command [units]
  서브 명령으로 start, stop, restart, status, enable, disable, is-active, is-enabled등이 있음

 웹 콘솔
 - 웹브라우저를 이용해 리눅스 서버를 관리하고 모니터링하기 위한 도구
 - cockpit 패키지 설치 후 서비스를 활성화/시작시키고 방화벽 설정 확인
 - 브라우저로 http://localhost:9090 에 접속하고 root사용자로 로그인함

3. 시스템 종료
 전원 관리 명령
 - 호환상 이유로 shutdown 명령을 계속 사용할 수 는 있음
 - 가급적 systemctl 명령을 사용하는게 좋음
  systemctl halt
  systemctl poweroff
  systemctl reboot
  systemctl suspend
  systemctl hibernate

 shutdown 명령
 - 시간을 정해 시스템을 안전하게 종료하는 명령
 - shutdown [option] time [message]
 - 옵션
  -r 재부팅
  -c 예약된 셧다운 취소 (타임인수 필요없음)
  -k 실제 셧다운을 하는 것 처럼 경고메시지만 보냄
  shutdown -r +10
 - time 인수
  종료시간으로 절대시간 형식 +10은 10분후 종료 의미
  인수로 now는 즉시 종료 의미

 시스템 종료 절차
 - 실제 systemd 프로세스를 통해 셧다운이 처리
  systemd 프로세스는 모든 프로세스에게 종료를 알림
  각 프로세스가 스스로 종료하도록 TERM 시그널을 보냄
  종료하지 않은 프로세스에게 강제종료를 위한 KILL 시그널을 보냄
  파일 시스템을 잠그고 루트 파일 시스템을 제외한 모든 파일 시스템을 언마운트함
  시스템 호출을 통해 커널에 재부팅 또는 종료 요청
 - 종료를 위해 halt 명령, 재부팅을 위해 reboot명령 사용 가능

 시스템 일시 중단
 - systemctl suspend
  일시 중단 : 시스템 상태를 램에 저장하고 저전력 상태로 함
 - systemctl hibernate
  최대 절전모드 : 시스템 상태를 하드디스크에 저장하고 전원을 끔
 - systemctl hybrid-sleep
  메모리 외에도 디스크에도 시스템 상태 저장

4. 데스크탑
 데스크랍
 - GUI를 제공하는 사용자 환경
  그래픽 윈도우, 아이콘, 툴바, 메뉴, 위젲 등을 마우스나 키보드로 조작
 - 대부분의 데탑은 X윈도우 시스템에 기반을 둠
 - 시각적으로 다양한 스타일에 데탑이 존재
  일반적으로 서버로 사용하는 리눅스에서는 명령 행 인터페이스만 제공

 GNOME
 - Red Hat 계열 리눅스의 기본 데스크탑
 - 단순함, 편의성, 안정성에 초점을 맞춤
 - 미니멀한 사용자 인터페이스가 특징

 KDE
 - K 데스크톱이라고도 하며 MS윈도우 환경과 유사
 - 다양한 프로그램을 통합적인 모습으로 보여줌
 - yum -y groupinstall 'KDE Plasma Workspaces' 로 설치 가능
 - 로그인 시 GNOME 또는 KDE를 선택 가능